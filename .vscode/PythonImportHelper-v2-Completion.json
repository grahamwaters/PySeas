[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sample",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sample",
        "description": "sample",
        "detail": "sample",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "keras",
        "importPath": "tensorflow",
        "description": "tensorflow",
        "isExtraImport": true,
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "urldefrag",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "dif",
        "importPath": "difPy",
        "description": "difPy",
        "isExtraImport": true,
        "detail": "difPy",
        "documentation": {}
    },
    {
        "label": "dif",
        "importPath": "difPy",
        "description": "difPy",
        "isExtraImport": true,
        "detail": "difPy",
        "documentation": {}
    },
    {
        "label": "dif",
        "importPath": "difPy",
        "description": "difPy",
        "isExtraImport": true,
        "detail": "difPy",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "imutils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imutils",
        "description": "imutils",
        "detail": "imutils",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "imutils",
        "description": "imutils",
        "isExtraImport": true,
        "detail": "imutils",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "isExtraImport": true,
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "ratelimit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ratelimit",
        "description": "ratelimit",
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "layers",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "optimizers",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "regularizers",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "initializers",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "constraints",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "activations",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "metrics",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "losses",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "callbacks",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "ImageDataGenerator",
        "importPath": "keras.preprocessing.image",
        "description": "keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "keras.preprocessing",
        "description": "keras.preprocessing",
        "isExtraImport": true,
        "detail": "keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "cam_backend",
        "description": "cam_backend",
        "isExtraImport": true,
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "tensorflow_hub",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow_hub",
        "description": "tensorflow_hub",
        "detail": "tensorflow_hub",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "get_buoy_list",
        "kind": 2,
        "importPath": "Pyseas_revived.app",
        "description": "Pyseas_revived.app",
        "peekOfCode": "def get_buoy_list():\n    # Add your list of buoy IDs here\n    buoy_ids = ['41001', '41002', '41003', '41004']\n    return buoy_ids\ndef get_buoy_images(buoy_ids):\n    image_urls = []\n    base_url = \"http://www.ndbc.noaa.gov/buoycam.php?station=\"\n    for buoy_id in buoy_ids:\n        url = base_url + buoy_id\n        response = requests.get(url)",
        "detail": "Pyseas_revived.app",
        "documentation": {}
    },
    {
        "label": "get_buoy_images",
        "kind": 2,
        "importPath": "Pyseas_revived.app",
        "description": "Pyseas_revived.app",
        "peekOfCode": "def get_buoy_images(buoy_ids):\n    image_urls = []\n    base_url = \"http://www.ndbc.noaa.gov/buoycam.php?station=\"\n    for buoy_id in buoy_ids:\n        url = base_url + buoy_id\n        response = requests.get(url)\n        soup = BeautifulSoup(response.content, 'html.parser')\n        img_tag = soup.find('img', {\"id\": \"latest_img\"})\n        if img_tag:\n            image_url = img_tag['src']",
        "detail": "Pyseas_revived.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Pyseas_revived.app",
        "description": "Pyseas_revived.app",
        "peekOfCode": "def index():\n    buoy_ids = get_buoy_list()\n    image_urls = get_buoy_images(buoy_ids)\n    return render_template('index.html', image_urls=image_urls)\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "Pyseas_revived.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Pyseas_revived.app",
        "description": "Pyseas_revived.app",
        "peekOfCode": "app = Flask(__name__)\ndef get_buoy_list():\n    # Add your list of buoy IDs here\n    buoy_ids = ['41001', '41002', '41003', '41004']\n    return buoy_ids\ndef get_buoy_images(buoy_ids):\n    image_urls = []\n    base_url = \"http://www.ndbc.noaa.gov/buoycam.php?station=\"\n    for buoy_id in buoy_ids:\n        url = base_url + buoy_id",
        "detail": "Pyseas_revived.app",
        "documentation": {}
    },
    {
        "label": "#needs_sphinx",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be extensions\n# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\nextensions = []\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "extensions = []\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'sample'\ncopyright = u'2012, Kenneth Reitz'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "source_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'sample'\ncopyright = u'2012, Kenneth Reitz'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#source_encoding",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'sample'\ncopyright = u'2012, Kenneth Reitz'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "master_doc = 'index'\n# General information about the project.\nproject = u'sample'\ncopyright = u'2012, Kenneth Reitz'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = 'v0.0.1'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "project = u'sample'\ncopyright = u'2012, Kenneth Reitz'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = 'v0.0.1'\n# The full version, including alpha/beta/rc tags.\nrelease = 'v0.0.1'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "copyright = u'2012, Kenneth Reitz'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = 'v0.0.1'\n# The full version, including alpha/beta/rc tags.\nrelease = 'v0.0.1'\n# The language for content autogenerated by Sphinx. Refer to documentation",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "version = 'v0.0.1'\n# The full version, including alpha/beta/rc tags.\nrelease = 'v0.0.1'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "release = 'v0.0.1'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#language",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#today",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#today_fmt",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "exclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#default_role",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#add_function_parentheses",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#add_module_names",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#show_authors",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "pygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#modindex_common_prefix",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_theme = 'default'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_theme_options",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_theme_path",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_title",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_short_title",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_logo",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_favicon",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_last_updated_fmt",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_smartypants",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_sidebars",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_additional_pages",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_additional_pages = {}\n# If false, no module index is generated.\n#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_domain_indices",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_domain_indices = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_index",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_split_index",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_sourcelink",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_sphinx",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_show_sphinx = True\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_copyright",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_show_copyright = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'sampledoc'\n# -- Options for LaTeX output --------------------------------------------------",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_opensearch",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_use_opensearch = ''\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'sampledoc'\n# -- Options for LaTeX output --------------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#html_file_suffix",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#html_file_suffix = None\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'sampledoc'\n# -- Options for LaTeX output --------------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "htmlhelp_basename = 'sampledoc'\n# -- Options for LaTeX output --------------------------------------------------\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_elements",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "latex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "latex_documents = [\n  ('index', 'sample.tex', u'sample Documentation',\n   u'Kenneth Reitz', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_logo",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_use_parts",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#latex_use_parts = False\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output --------------------------------------------",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_show_pagerefs",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#latex_show_pagerefs = False\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output --------------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_show_urls",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#latex_show_urls = False\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output --------------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'sample', u'sample Documentation',",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_appendices",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#latex_appendices = []\n# If false, no module index is generated.\n#latex_domain_indices = True\n# -- Options for manual page output --------------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'sample', u'sample Documentation',\n     [u'Kenneth Reitz'], 1)\n]",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#latex_domain_indices",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#latex_domain_indices = True\n# -- Options for manual page output --------------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'sample', u'sample Documentation',\n     [u'Kenneth Reitz'], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "man_pages = [\n    ('index', 'sample', u'sample Documentation',\n     [u'Kenneth Reitz'], 1)\n]\n# If true, show URL addresses after external links.\n#man_show_urls = False\n# -- Options for Texinfo output ------------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#man_show_urls",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#man_show_urls = False\n# -- Options for Texinfo output ------------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'sample', u'sample Documentation',\n   u'Kenneth Reitz', 'sample', 'One line description of project.',\n   'Miscellaneous'),\n]",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "texinfo_documents = [\n  ('index', 'sample', u'sample Documentation',\n   u'Kenneth Reitz', 'sample', 'One line description of project.',\n   'Miscellaneous'),\n]\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_appendices",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#texinfo_appendices = []\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_domain_indices",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "#texinfo_show_urls",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "#texinfo_show_urls = 'footnote'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "get_hmm",
        "kind": 2,
        "importPath": "sample.core",
        "description": "sample.core",
        "peekOfCode": "def get_hmm():\n    \"\"\"Get a thought.\"\"\"\n    return 'hmmm...'\ndef hmm():\n    \"\"\"Contemplation...\"\"\"\n    if helpers.get_answer():\n        print(get_hmm())",
        "detail": "sample.core",
        "documentation": {}
    },
    {
        "label": "hmm",
        "kind": 2,
        "importPath": "sample.core",
        "description": "sample.core",
        "peekOfCode": "def hmm():\n    \"\"\"Contemplation...\"\"\"\n    if helpers.get_answer():\n        print(get_hmm())",
        "detail": "sample.core",
        "documentation": {}
    },
    {
        "label": "get_answer",
        "kind": 2,
        "importPath": "sample.helpers",
        "description": "sample.helpers",
        "peekOfCode": "def get_answer():\n    \"\"\"Get an answer.\"\"\"\n    return True",
        "detail": "sample.helpers",
        "documentation": {}
    },
    {
        "label": "AdvancedTestSuite",
        "kind": 6,
        "importPath": "tests.test_advanced",
        "description": "tests.test_advanced",
        "peekOfCode": "class AdvancedTestSuite(unittest.TestCase):\n    \"\"\"Advanced test cases.\"\"\"\n    def test_thoughts(self):\n        self.assertIsNone(sample.hmm())\nif __name__ == '__main__':\n    unittest.main()",
        "detail": "tests.test_advanced",
        "documentation": {}
    },
    {
        "label": "BasicTestSuite",
        "kind": 6,
        "importPath": "tests.test_basic",
        "description": "tests.test_basic",
        "peekOfCode": "class BasicTestSuite(unittest.TestCase):\n    \"\"\"Basic test cases.\"\"\"\n    def test_absolute_truth_and_meaning(self):\n        assert True\nif __name__ == '__main__':\n    unittest.main()",
        "detail": "tests.test_basic",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "def index():\n    if request.method == 'POST':\n        buoy_id = request.form['buoy_id']\n        webcam_url = f'https://www.ndbc.noaa.gov/images/buoycam/{buoy_id}.jpg'\n        response = requests.get(webcam_url)\n        # get the current time and check if it's after sunset\n        date = datetime.datetime.now(pytz.timezone('US/Pacific'))\n        url = f'https://api.sunrise-sunset.org/json?lat={lat}&lng={lon}&date={date.strftime(\"%Y-%m-%d\")}'\n        response = requests.get(url)\n        sunset_time_str = response.json()['results']['sunset']",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "buoy_id",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "buoy_id = '46219' # example buoy ID\nurl = f'https://www.ndbc.noaa.gov/data/stations/station_history_{buoy_id}.txt'\nresponse = requests.get(url)\nlines = response.content.decode().split('\\n')\nlat, lon = [float(line.split()[-1]) for line in lines if 'Lat' in line or 'Lon' in line]\n# Step 2: Use sunrise-sunset.org to calculate sunset time\ndate = datetime.datetime.now(pytz.timezone('US/Pacific'))\nurl = f'https://api.sunrise-sunset.org/json?lat={lat}&lng={lon}&date={date.strftime(\"%Y-%m-%d\")}'\nresponse = requests.get(url)\nsunset_time_str = response.json()['results']['sunset']",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "url = f'https://www.ndbc.noaa.gov/data/stations/station_history_{buoy_id}.txt'\nresponse = requests.get(url)\nlines = response.content.decode().split('\\n')\nlat, lon = [float(line.split()[-1]) for line in lines if 'Lat' in line or 'Lon' in line]\n# Step 2: Use sunrise-sunset.org to calculate sunset time\ndate = datetime.datetime.now(pytz.timezone('US/Pacific'))\nurl = f'https://api.sunrise-sunset.org/json?lat={lat}&lng={lon}&date={date.strftime(\"%Y-%m-%d\")}'\nresponse = requests.get(url)\nsunset_time_str = response.json()['results']['sunset']\nsunset_time = datetime.datetime.strptime(sunset_time_str, '%I:%M:%S %p').time()",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "response = requests.get(url)\nlines = response.content.decode().split('\\n')\nlat, lon = [float(line.split()[-1]) for line in lines if 'Lat' in line or 'Lon' in line]\n# Step 2: Use sunrise-sunset.org to calculate sunset time\ndate = datetime.datetime.now(pytz.timezone('US/Pacific'))\nurl = f'https://api.sunrise-sunset.org/json?lat={lat}&lng={lon}&date={date.strftime(\"%Y-%m-%d\")}'\nresponse = requests.get(url)\nsunset_time_str = response.json()['results']['sunset']\nsunset_time = datetime.datetime.strptime(sunset_time_str, '%I:%M:%S %p').time()\n# Step 3: Download the image at sunset time",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "lines",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "lines = response.content.decode().split('\\n')\nlat, lon = [float(line.split()[-1]) for line in lines if 'Lat' in line or 'Lon' in line]\n# Step 2: Use sunrise-sunset.org to calculate sunset time\ndate = datetime.datetime.now(pytz.timezone('US/Pacific'))\nurl = f'https://api.sunrise-sunset.org/json?lat={lat}&lng={lon}&date={date.strftime(\"%Y-%m-%d\")}'\nresponse = requests.get(url)\nsunset_time_str = response.json()['results']['sunset']\nsunset_time = datetime.datetime.strptime(sunset_time_str, '%I:%M:%S %p').time()\n# Step 3: Download the image at sunset time\nwebcam_url = f'https://www.ndbc.noaa.gov/images/buoycam/{buoy_id}.jpg'",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "date = datetime.datetime.now(pytz.timezone('US/Pacific'))\nurl = f'https://api.sunrise-sunset.org/json?lat={lat}&lng={lon}&date={date.strftime(\"%Y-%m-%d\")}'\nresponse = requests.get(url)\nsunset_time_str = response.json()['results']['sunset']\nsunset_time = datetime.datetime.strptime(sunset_time_str, '%I:%M:%S %p').time()\n# Step 3: Download the image at sunset time\nwebcam_url = f'https://www.ndbc.noaa.gov/images/buoycam/{buoy_id}.jpg'\nresponse = requests.get(webcam_url)\nimg = Image.open(BytesIO(response.content))\n# Step 4: Preprocess the image data",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "url = f'https://api.sunrise-sunset.org/json?lat={lat}&lng={lon}&date={date.strftime(\"%Y-%m-%d\")}'\nresponse = requests.get(url)\nsunset_time_str = response.json()['results']['sunset']\nsunset_time = datetime.datetime.strptime(sunset_time_str, '%I:%M:%S %p').time()\n# Step 3: Download the image at sunset time\nwebcam_url = f'https://www.ndbc.noaa.gov/images/buoycam/{buoy_id}.jpg'\nresponse = requests.get(webcam_url)\nimg = Image.open(BytesIO(response.content))\n# Step 4: Preprocess the image data\nimg = img.resize((224, 224)) # example size for VGG16",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "response = requests.get(url)\nsunset_time_str = response.json()['results']['sunset']\nsunset_time = datetime.datetime.strptime(sunset_time_str, '%I:%M:%S %p').time()\n# Step 3: Download the image at sunset time\nwebcam_url = f'https://www.ndbc.noaa.gov/images/buoycam/{buoy_id}.jpg'\nresponse = requests.get(webcam_url)\nimg = Image.open(BytesIO(response.content))\n# Step 4: Preprocess the image data\nimg = img.resize((224, 224)) # example size for VGG16\nimg_arr = np.array(img.convert('RGB'))",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "sunset_time_str",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "sunset_time_str = response.json()['results']['sunset']\nsunset_time = datetime.datetime.strptime(sunset_time_str, '%I:%M:%S %p').time()\n# Step 3: Download the image at sunset time\nwebcam_url = f'https://www.ndbc.noaa.gov/images/buoycam/{buoy_id}.jpg'\nresponse = requests.get(webcam_url)\nimg = Image.open(BytesIO(response.content))\n# Step 4: Preprocess the image data\nimg = img.resize((224, 224)) # example size for VGG16\nimg_arr = np.array(img.convert('RGB'))\nimg_arr = img_arr / 255.0 # normalize pixel values",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "sunset_time",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "sunset_time = datetime.datetime.strptime(sunset_time_str, '%I:%M:%S %p').time()\n# Step 3: Download the image at sunset time\nwebcam_url = f'https://www.ndbc.noaa.gov/images/buoycam/{buoy_id}.jpg'\nresponse = requests.get(webcam_url)\nimg = Image.open(BytesIO(response.content))\n# Step 4: Preprocess the image data\nimg = img.resize((224, 224)) # example size for VGG16\nimg_arr = np.array(img.convert('RGB'))\nimg_arr = img_arr / 255.0 # normalize pixel values\n# Step 5: Train a model to classify sunset images",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "webcam_url",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "webcam_url = f'https://www.ndbc.noaa.gov/images/buoycam/{buoy_id}.jpg'\nresponse = requests.get(webcam_url)\nimg = Image.open(BytesIO(response.content))\n# Step 4: Preprocess the image data\nimg = img.resize((224, 224)) # example size for VGG16\nimg_arr = np.array(img.convert('RGB'))\nimg_arr = img_arr / 255.0 # normalize pixel values\n# Step 5: Train a model to classify sunset images\n# example code using VGG16 architecture\nbase_model = tf.keras.applications.VGG16(include_top=False, input_shape=(224, 224, 3))",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "response = requests.get(webcam_url)\nimg = Image.open(BytesIO(response.content))\n# Step 4: Preprocess the image data\nimg = img.resize((224, 224)) # example size for VGG16\nimg_arr = np.array(img.convert('RGB'))\nimg_arr = img_arr / 255.0 # normalize pixel values\n# Step 5: Train a model to classify sunset images\n# example code using VGG16 architecture\nbase_model = tf.keras.applications.VGG16(include_top=False, input_shape=(224, 224, 3))\nx = tf.keras.layers.Flatten()(base_model.output)",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "img = Image.open(BytesIO(response.content))\n# Step 4: Preprocess the image data\nimg = img.resize((224, 224)) # example size for VGG16\nimg_arr = np.array(img.convert('RGB'))\nimg_arr = img_arr / 255.0 # normalize pixel values\n# Step 5: Train a model to classify sunset images\n# example code using VGG16 architecture\nbase_model = tf.keras.applications.VGG16(include_top=False, input_shape=(224, 224, 3))\nx = tf.keras.layers.Flatten()(base_model.output)\nx = tf.keras.layers.Dense(256, activation='relu')(x)",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "img = img.resize((224, 224)) # example size for VGG16\nimg_arr = np.array(img.convert('RGB'))\nimg_arr = img_arr / 255.0 # normalize pixel values\n# Step 5: Train a model to classify sunset images\n# example code using VGG16 architecture\nbase_model = tf.keras.applications.VGG16(include_top=False, input_shape=(224, 224, 3))\nx = tf.keras.layers.Flatten()(base_model.output)\nx = tf.keras.layers.Dense(256, activation='relu')(x)\nx = tf.keras.layers.Dropout(0.5)(x)\noutput = tf.keras.layers.Dense(1, activation='sigmoid')(x)",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "img_arr",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "img_arr = np.array(img.convert('RGB'))\nimg_arr = img_arr / 255.0 # normalize pixel values\n# Step 5: Train a model to classify sunset images\n# example code using VGG16 architecture\nbase_model = tf.keras.applications.VGG16(include_top=False, input_shape=(224, 224, 3))\nx = tf.keras.layers.Flatten()(base_model.output)\nx = tf.keras.layers.Dense(256, activation='relu')(x)\nx = tf.keras.layers.Dropout(0.5)(x)\noutput = tf.keras.layers.Dense(1, activation='sigmoid')(x)\nmodel = tf.keras.models.Model(inputs=base_model.input, outputs=output)",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "img_arr",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "img_arr = img_arr / 255.0 # normalize pixel values\n# Step 5: Train a model to classify sunset images\n# example code using VGG16 architecture\nbase_model = tf.keras.applications.VGG16(include_top=False, input_shape=(224, 224, 3))\nx = tf.keras.layers.Flatten()(base_model.output)\nx = tf.keras.layers.Dense(256, activation='relu')(x)\nx = tf.keras.layers.Dropout(0.5)(x)\noutput = tf.keras.layers.Dense(1, activation='sigmoid')(x)\nmodel = tf.keras.models.Model(inputs=base_model.input, outputs=output)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "base_model",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "base_model = tf.keras.applications.VGG16(include_top=False, input_shape=(224, 224, 3))\nx = tf.keras.layers.Flatten()(base_model.output)\nx = tf.keras.layers.Dense(256, activation='relu')(x)\nx = tf.keras.layers.Dropout(0.5)(x)\noutput = tf.keras.layers.Dense(1, activation='sigmoid')(x)\nmodel = tf.keras.models.Model(inputs=base_model.input, outputs=output)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# ... train the model on a dataset of sunset and non-sunset images ...\n# Step 6: Use Flask to create a web app\nfrom flask import Flask, request, render_template",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "x = tf.keras.layers.Flatten()(base_model.output)\nx = tf.keras.layers.Dense(256, activation='relu')(x)\nx = tf.keras.layers.Dropout(0.5)(x)\noutput = tf.keras.layers.Dense(1, activation='sigmoid')(x)\nmodel = tf.keras.models.Model(inputs=base_model.input, outputs=output)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# ... train the model on a dataset of sunset and non-sunset images ...\n# Step 6: Use Flask to create a web app\nfrom flask import Flask, request, render_template\napp = Flask(__name__)",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "x = tf.keras.layers.Dense(256, activation='relu')(x)\nx = tf.keras.layers.Dropout(0.5)(x)\noutput = tf.keras.layers.Dense(1, activation='sigmoid')(x)\nmodel = tf.keras.models.Model(inputs=base_model.input, outputs=output)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# ... train the model on a dataset of sunset and non-sunset images ...\n# Step 6: Use Flask to create a web app\nfrom flask import Flask, request, render_template\napp = Flask(__name__)\n@app.route('/', methods=['GET', 'POST'])",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "x = tf.keras.layers.Dropout(0.5)(x)\noutput = tf.keras.layers.Dense(1, activation='sigmoid')(x)\nmodel = tf.keras.models.Model(inputs=base_model.input, outputs=output)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# ... train the model on a dataset of sunset and non-sunset images ...\n# Step 6: Use Flask to create a web app\nfrom flask import Flask, request, render_template\napp = Flask(__name__)\n@app.route('/', methods=['GET', 'POST'])\ndef index():",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "output = tf.keras.layers.Dense(1, activation='sigmoid')(x)\nmodel = tf.keras.models.Model(inputs=base_model.input, outputs=output)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# ... train the model on a dataset of sunset and non-sunset images ...\n# Step 6: Use Flask to create a web app\nfrom flask import Flask, request, render_template\napp = Flask(__name__)\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "model = tf.keras.models.Model(inputs=base_model.input, outputs=output)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# ... train the model on a dataset of sunset and non-sunset images ...\n# Step 6: Use Flask to create a web app\nfrom flask import Flask, request, render_template\napp = Flask(__name__)\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        buoy_id = request.form['buoy_id']",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "NEW_gpt_powered",
        "description": "NEW_gpt_powered",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        buoy_id = request.form['buoy_id']\n        webcam_url = f'https://www.ndbc.noaa.gov/images/buoycam/{buoy_id}.jpg'\n        response = requests.get(webcam_url)\n        # get the current time and check if it's after sunset\n        date = datetime.datetime.now(pytz.timezone('US/Pacific'))\n        url = f'https://api.sunrise-sunset.org/json?lat={lat}&lng={lon}&date={date.strftime(\"%Y-%m-%d\")}'",
        "detail": "NEW_gpt_powered",
        "documentation": {}
    },
    {
        "label": "Buoy",
        "kind": 6,
        "importPath": "PyBuoy",
        "description": "PyBuoy",
        "peekOfCode": "class Buoy(): # this is the super parent class\n    def __init__(self,buoy_id=\"none\",temperature=\"none\"):\n        self.buoy_id = buoy_id\n        self.temperature = temperature\n    def check_buoy(self,buoy_id):\n        self.check_data = 'defaults' # put defaults into the code here\nclass Chosen_Buoy(Buoy):\n    def __init__(self,buoy_type=\"none\"):\n        super().__init__(\"Chosen_Buoy\")\n        self.buoy_lat = 10.0",
        "detail": "PyBuoy",
        "documentation": {}
    },
    {
        "label": "Chosen_Buoy",
        "kind": 6,
        "importPath": "PyBuoy",
        "description": "PyBuoy",
        "peekOfCode": "class Chosen_Buoy(Buoy):\n    def __init__(self,buoy_type=\"none\"):\n        super().__init__(\"Chosen_Buoy\")\n        self.buoy_lat = 10.0\n        self.buoy_lng = 10.0\n        self.buoy_depth = 10.0\n        self.buoy_temp = 10.0\n        self.buoy_atmpressure = 10.0\n    def report_out(self,chosen_metric):\n        super().report_out(chosen_metric)",
        "detail": "PyBuoy",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "PyBuoy",
        "description": "PyBuoy",
        "peekOfCode": "def main():\n    # create a matrix 36 x 36 containing buoy ids\n    # https://www.ndbc.noaa.gov/buoycam.php?station=xxxxx\n    # this gets most recent photo from the buoy with the code xxxxx\n    # https://tidesandcurrents.noaa.gov/api-helper/url-generator.html\n    #https://www.ndbc.noaa.gov/rss/ndbc_obs_search.php?lat=40N&lon=73W&radius=100\n    #https://www.ndbc.noaa.gov/data/realtime2/ (station id) .swdir\n    #https://api.tidesandcurrents.noaa.gov/api/prod/datagetter?begin_date=20130808 15:00&end_date=20130808 15:06&station=8454000&product=water_temperature&units=english&time_zone=gmt&application=ports_screen&format=json\n    #The result \"V\" should be the desired variable\n    product = 'air_temperature'",
        "detail": "PyBuoy",
        "documentation": {}
    },
    {
        "label": "Artist",
        "kind": 6,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "class Artist:\n    def __init__(self):\n        self.folder = 'images'\n        self.batches = []\n    def make_panorama(self, images):\n        \"\"\"\n        make_panorama\n        _extended_summary_\n        :param images: _description_\n        :type images: _type_",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "panel_sorter",
        "kind": 2,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "def panel_sorter():\n    # Go into each panel directory and sort the images into folders by the date in their filename (if they haven't already been sorted)\n    # example unsorted directory: 'images/panels/46078/2022_11_5_15_44_panel_1.png'\n    # example sorted directory: images/panels/51000/2022_11_5_15_44/panel_1.png\n    for buoy_id in os.listdir('images/panels'):\n        if buoy_id != '.DS_Store' and '.' not in buoy_id:\n            for image in os.listdir('images/panels/{}'.format(buoy_id)):\n                if image != '.DS_Store' and '.' not in image:\n                    try:\n                        # find the 2022_11_5_15_44 (#_#_#_#_#) part of the filename and make a new folder with that name.",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "divide_into_panels",
        "kind": 2,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "def divide_into_panels(buoy_id, image_file):\n    # divide the image into six panels, as dictated in the image processing pipeline for NOAA Buoy Cameras Comments above.\n    # read the image\n    img = cv2.imread(image_file)\n    # get the name of the image file\n    image_name = image_file.split('/')[-1]\n    # get the dimensions of the image\n    height, width, channels = img.shape\n    # Before dividing into panels, crop the image to remove 30 pixels from the bottom of the image.\n    # This is to remove the \"Buoy Camera\" text from the image.",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "is_it_daytime",
        "kind": 2,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "def is_it_daytime(image_path):\n    # This function will take an image path and return True if it is daytime and False if it is nighttime.\n    # The image path should be a string.\n    # The image path should be the path to the image that was used to create the panels.\n    # The image path should be in the format 'images/buoys/46025/2019_12_12_12_12.jpg'\n    # get the image\n    try:\n        img = Image.open(image_path)\n        # get the image size\n        width, height = img.size",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "image_has_changed",
        "kind": 2,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "def image_has_changed(image_one,image_two):\n    # looks for changes between two images and returns True if there are changes and False if there are not.\n    # this function is used to determine what rate the images are being updated for each buoy.\n    # if the images are not changing, then the buoy is not updating the images.\n    # if the images are changing, then the buoy is updating the images.\n    try:\n        image_one = cv2.imread(image_one)\n        image_two = cv2.imread(image_two)\n        difference = cv2.subtract(image_one, image_two)\n        result = not np.any(difference)",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "artist_eval",
        "kind": 2,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "def artist_eval(image_path):\n    # get the image\n    img = Image.open(image_path)\n    # get the image size\n    width, height = img.size\n    # get the pixel values for the center of the image\n    pixel_values = img.getpixel((int(width/2), int(height/2)))\n    # get the pixel values for the top left corner of the image\n    upper_left = img.getpixel((0, 0))\n    # get the pixel values for the top right corner of the image",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "check_for_updates",
        "kind": 2,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "def check_for_updates(buoy_update_rates_dict):\n    # Check the buoy_update_rates_dict to see if any of the buoys satistfy the update rate requirements:\n    # Requirements: the current time minus the last time we downloaded an image for this buoy must be greater than the update rate for this buoy. If it is, then we will add the buoy id to the list of buoys that need to be updated and return it to the main function.\n    # If the buoy_update_rates_dict is empty, then we will return an empty list.\n    # If the buoy_update_rates_dict is not empty, then we will check the update rates for each buoy and return a list of the buoy ids that need to be updated.\n    if len(buoy_update_rates_dict) == 0:\n        return []\n    else:\n        buoys_to_update = []\n        for buoy_id in buoy_update_rates_dict:",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "get_latest_data",
        "kind": 2,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "def get_latest_data():\n    url = \"https://www.ndbc.noaa.gov/data/latest_obs/latest_obs.txt\"\n    s=requests.get(url).content\n    # the table contains two rows that have header data. combine them into one row.\n    df = pd.read_csv(io.StringIO(s.decode('utf-8')), sep='\\s+')\n    df.columns = df.columns.str.strip()\n    # df = df.dropna(axis=1, how='all')\n    # df = df.dropna(axis=0, how='all')\n    # df = df.dropna(axis=0, how='any')\n    # df = df.reset_index(drop=True)",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "display_last_image",
        "kind": 2,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "def display_last_image(buoys_to_update):\n    # get the last buoy in the list of buoys that need to be updated\n    buoy_id = buoys_to_update[-1]\n    # get the list of images in the folder\n    # sort the images by date\n    # make folder_path variable from relative path\n    # choose the last buoy in the list of buoy folders\n    last_buoy=buoys_to_update[-1]\n    folder_path = 'images/buoys/{}'.format(last_buoy)\n    images = os.listdir(folder_path)",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "cam_buoys",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "cam_buoys = []\n# %%\n# Set up #logging file\n#logging.basicConfig(filename='cam_finder.log', level=#logging.INFO)\n# %% [markdown]\n# Stage One\n# %%\nids = [\"21414\",\"21415\",\"21416\",\"21417\",\"21418\",\"21419\",\"32301\",\"32302\",\"32411\",\"32412\",\"32413\",\"41001\",\"41002\",\"41003\",\"41004\",\"41007\",\"41008\",\"41009\",\"41010\",\"41011\",\"41012\",\"41016\",\"41017\",\"41018\",\"41021\",\"41022\",\"41023\",\"41036\",\"41040\",\"41041\",\"41043\",\"41044\",\"41046\",\"41049\",\"41420\",\"41421\",\"41424\",\"41425\",\"42001\",\"42002\",\"42003\",\"42004\",\"42007\",\"42008\",\"42009\",\"42010\",\"42011\",\"42012\",\"42017\",\"42018\",\"42019\",\"42020\",\"42025\",\"42035\",\"42038\",\"42039\",\"42040\",\"42041\",\"42042\",\"42053\",\"42056\",\"42057\",\"42058\",\"42059\",\"42060\",\"42065\",\"42408\",\"42409\",\"42429\",\"42501\",\"42503\",\"42534\",\"44001\",\"44003\",\"44004\",\"44005\",\"44006\",\"44007\",\"44010\",\"44011\",\"44012\",\"44013\",\"44014\",\"44015\",\"44019\",\"44020\",\"44023\",\"44025\",\"44026\",\"44027\",\"44066\",\"44070\",\"44071\",\"44401\",\"44402\",\"44403\",\"45002\",\"45003\",\"45004\",\"45005\",\"45006\",\"45007\",\"45010\",\"45011\",\"45012\",\"46001\",\"46002\",\"46003\",\"46007\",\"46008\",\"46009\",\"46010\",\"46011\",\"46012\",\"46015\",\"46016\",\"46017\",\"46018\",\"46019\",\"46020\",\"46023\",\"46024\",\"46025\",\"46026\",\"46027\",\"46028\",\"46031\",\"46032\",\"46033\",\"46034\",\"46035\",\"46037\",\"46040\",\"46041\",\"46042\",\"46043\",\"46045\",\"46047\",\"46051\",\"46053\",\"46054\",\"46059\",\"46060\",\"46061\",\"46066\",\"46069\",\"46070\",\"46071\",\"46072\",\"46073\",\"46077\",\"46078\",\"46079\",\"46080\",\"46081\",\"46082\",\"46085\",\"46086\",\"46087\",\"46088\",\"46089\",\"46090\",\"46107\",\"46115\",\"46270\",\"46290\",\"46401\",\"46402\",\"46405\",\"46406\",\"46407\",\"46408\",\"46409\",\"46410\",\"46413\",\"46414\",\"46415\",\"46416\",\"46419\",\"46490\",\"46779\",\"46780\",\"46781\",\"46782\",\"46785\",\"51000\",\"51001\",\"51002\",\"51003\",\"51004\",\"51005\",\"51028\",\"51100\",\"51101\",\"51406\",\"51407\",\"51425\",\"52009\",\"52401\",\"52402\",\"52403\",\"52404\",\"52405\",\"91204\",\"91222\",\"91251\",\"91328\",\"91338\",\"91343\",\"91356\",\"91365\",\"91374\",\"91377\",\"91411\",\"91442\",\"46265\",\"41670\",\"41852\",\"41904\",\"41933\",\"48916\",\"48917\",\"52838\",\"52839\",\"52840\",\"52841\",\"52842\",\"52843\",\"52862\",\"55012\",\"55013\",\"55015\",\"55016\",\"55023\",\"55042\",\"58952\",\"31052\",\"31053\",\"41052\",\"41053\",\"41056\",\"41058\",\"41115\",\"41121\",\"41030\",\"44042\",\"44043\",\"44057\",\"44058\",\"44059\",\"44061\",\"44064\",\"44068\",\"45016\",\"45017\",\"45018\",\"45019\",\"45177\",\"45202\",\"45203\",\"45204\",\"45205\",\"45206\",\"45207\",\"46116\",\"46117\",\"46127\",\"42014\",\"42021\",\"42022\",\"42023\",\"42024\",\"42026\",\"32404\",\"41029\",\"41033\",\"41037\",\"41038\",\"41064\",\"41065\",\"41110\",\"41119\",\"41159\",\"32488\",\"41193\",\"44138\",\"44139\",\"44140\",\"44141\",\"44142\",\"44150\",\"44176\",\"44235\",\"44251\",\"44255\",\"44258\",\"44488\",\"45132\",\"45135\",\"45136\",\"45137\",\"45138\",\"45139\",\"45142\",\"45143\",\"45144\",\"45145\",\"45147\",\"45148\",\"45151\",\"45152\",\"45154\",\"45155\",\"45158\",\"45159\",\"46036\",\"46131\",\"46132\",\"46084\",\"46134\",\"46138\",\"46139\",\"46147\",\"46181\",\"46183\",\"46184\",\"46185\",\"46204\",\"46207\",\"46208\",\"46303\",\"46304\",\"48021\",\"45162\",\"45163\",\"45195\",\"23219\",\"23227\",\"32067\",\"32068\",\"42087\",\"42088\",\"42089\",\"42090\",\"46109\",\"46110\",\"46111\",\"46112\",\"21346\",\"21347\",\"21348\",\"21595\",\"21597\",\"21598\",\"21637\",\"21640\",\"22102\",\"22103\",\"22104\",\"22105\",\"22106\",\"22107\",\"45029\",\"45164\",\"45165\",\"45168\",\"45169\",\"45176\",\"46091\",\"46092\",\"62091\",\"62092\",\"62093\",\"62094\",\"41097\",\"41098\",\"41100\",\"41101\",\"41300\",\"61001\",\"45025\",\"45175\",\"44039\",\"44040\",\"44060\",\"23220\",\"23223\",\"23225\",\"46261\",\"46263\",\"48901\",\"48908\",\"48909\",\"48912\",\"44024\",\"44029\",\"44030\",\"44031\",\"44032\",\"44033\",\"44036\",\"44037\",\"45172\",\"45173\",\"46118\",\"46119\",\"46531\",\"46534\",\"46538\",\"46565\",\"44075\",\"44076\",\"44077\",\"44078\",\"46097\",\"46098\",\"51046\",\"51201\",\"51202\",\"51203\",\"51204\",\"51205\",\"51208\",\"51209\",\"51210\",\"51211\",\"51212\",\"51213\",\"52202\",\"52211\",\"13002\",\"13008\",\"13009\",\"13010\",\"15001\",\"15002\",\"31001\",\"31002\",\"31003\",\"31004\",\"31005\",\"31006\",\"62121\",\"62124\",\"62125\",\"62126\",\"62127\",\"62130\",\"62144\",\"62145\",\"62146\",\"62147\",\"62148\",\"62149\",\"62165\",\"62166\",\"63105\",\"63110\",\"63112\",\"63113\",\"14041\",\"14043\",\"14047\",\"23001\",\"23003\",\"23004\",\"23008\",\"23009\",\"23010\",\"23011\",\"23012\",\"23013\",\"23016\",\"23017\",\"53005\",\"53006\",\"53009\",\"53040\",\"56053\",\"01506\",\"01507\",\"01518\",\"01537\",\"48904\",\"48907\",\"01521\",\"01522\",\"01523\",\"01524\",\"01526\",\"01531\",\"01535\",\"01536\",\"01538\",\"01909\",\"01910\",\"31201\",\"41112\",\"41113\",\"41114\",\"41116\",\"41118\",\"41120\",\"42084\",\"42091\",\"42094\",\"42099\",\"44088\",\"44094\",\"44099\",\"44100\",\"44172\",\"46114\",\"46211\",\"46212\",\"46215\",\"46216\",\"46217\",\"46218\",\"46219\",\"46220\",\"46223\",\"46224\",\"46225\",\"46226\",\"46227\",\"46228\",\"46231\",\"46232\",\"46234\",\"46235\",\"46236\",\"46237\",\"46240\",\"46241\",\"46242\",\"46243\",\"46244\",\"46245\",\"46249\",\"46250\",\"46251\",\"46253\",\"46254\",\"46256\",\"46262\",\"46267\",\"46268\",\"46269\",\"46273\",\"46274\",\"51200\",\"48212\",\"48213\",\"48214\",\"48677\",\"48678\",\"48679\",\"48680\",\"48911\",\"42044\",\"42045\",\"42046\",\"42047\",\"42048\",\"42049\",\"42078\",\"42079\",\"42093\",\"42095\",\"42097\",\"44056\",\"45180\",\"46259\",\"46266\",\"62028\",\"62029\",\"62030\",\"62050\",\"62081\",\"62103\",\"62108\",\"62163\",\"62170\",\"62298\",\"62301\",\"62303\",\"62442\",\"64045\",\"44098\",\"46121\",\"46122\",\"46123\",\"46124\",\"28902\",\"28903\",\"28904\",\"28906\",\"28907\",\"28908\",\"58900\",\"58902\",\"58903\",\"58904\",\"58905\",\"58906\",\"58909\",\"68900\",\"78900\",\"45014\",\"45184\",\"44053\",\"01517\",\"32012\",\"41060\",\"41061\",\"21D20\",\"32D12\",\"32D13\",\"41A46\",\"41S43\",\"41S46\",\"46B35\",\"ALSN6\",\"AMAA2\",\"AUGA2\",\"BLIA2\",\"BURL1\",\"BUSL1\",\"CDRF1\",\"CHLV2\",\"CLKN7\",\"CSBF1\",\"DBLN6\",\"DESW1\",\"DRFA2\",\"DRYF1\",\"DSLN7\",\"DUCN7\",\"EB01\",\"EB10\",\"EB33\",\"EB35\",\"EB36\",\"EB43\",\"EB52\",\"EB53\",\"EB70\",\"EB90\",\"EB91\",\"EB92\",\"FARP2\",\"FBIS1\",\"FPSN7\",\"FWYF1\",\"GBCL1\",\"GDIL1\",\"GLLN6\",\"IOSN3\",\"LONF1\",\"LPOI1\",\"MDRM1\",\"MISM1\",\"MLRF1\",\"MPCL1\",\"PILA2\",\"PILM4\",\"PLSF1\",\"POTA2\",\"PTAC1\",\"PTAT2\",\"SANF1\",\"SAUF1\",\"SBIO1\",\"SGNW3\",\"SGOF1\",\"SISW1\",\"SPGF1\",\"SRST2\",\"STDM4\",\"SUPN6\",\"SVLS1\",\"THIN6\",\"VENF1\",\"HBXC1\",\"MYXC1\",\"TDPC1\",\"FSTI2\",\"DMNO3\",\"GPTW1\",\"HMNO3\",\"PRTO3\",\"SEFO3\",\"SETO3\",\"SRAW1\",\"SRFW1\",\"TANO3\",\"ANMF1\",\"ARPF1\",\"BGCF1\",\"CAMF1\",\"CLBF1\",\"EGKF1\",\"NFBF1\",\"PTRF1\",\"SHPF1\",\"MBIN7\",\"MBNN7\",\"OCPN7\",\"BSCA1\",\"CRTA1\",\"DPHA1\",\"KATA1\",\"MBLA1\",\"MHPA1\",\"SACV4\",\"BBSF1\",\"BDVF1\",\"BKYF1\",\"BNKF1\",\"BOBF1\",\"BSKF1\",\"CNBF1\",\"CWAF1\",\"DKKF1\",\"GBIF1\",\"GBTF1\",\"GKYF1\",\"JBYF1\",\"JKYF1\",\"LBRF1\",\"LBSF1\",\"LMDF1\",\"LMRF1\",\"LSNF1\",\"MDKF1\",\"MNBF1\",\"MUKF1\",\"NRRF1\",\"PKYF1\",\"TCVF1\",\"THRF1\",\"TPEF1\",\"TRRF1\",\"WIWF1\",\"WPLF1\",\"APNM4\",\"CHII2\",\"MCYI3\",\"SRLM4\",\"SVNM4\",\"TBIM4\",\"THLO1\",\"LCIY2\",\"LLBP7\",\"FWIC3\",\"MISC3\",\"MISN6\",\"NCSC3\",\"NOSC3\",\"OFPN6\",\"ILDL1\",\"MRSL1\",\"SIPM6\",\"SLPL1\",\"LUML1\",\"TAML1\",\"AKXA2\",\"APMA2\",\"BEXA2\",\"CDXA2\",\"CPXA2\",\"DHXA2\",\"DPXA2\",\"ERXA2\",\"GBXA2\",\"GEXA2\",\"GIXA2\",\"GPXA2\",\"HMSA2\",\"ICYA2\",\"JLXA2\",\"JMLA2\",\"JNGA2\",\"KEXA2\",\"KNXA2\",\"KOZA2\",\"LIXA2\",\"MIXA2\",\"MRNA2\",\"MRYA2\",\"NKLA2\",\"NKXA2\",\"NLXA2\",\"NMXA2\",\"NSXA2\",\"PAUA2\",\"PEXA2\",\"PGXA2\",\"PPXA2\",\"PTLA2\",\"RIXA2\",\"SCXA2\",\"SIXA2\",\"SKXA2\",\"SLXA2\",\"SPXA2\",\"SRXA2\",\"STXA2\",\"SXXA2\",\"TKEA2\",\"TPXA2\",\"UQXA2\",\"VDXA2\",\"WCXA2\",\"MSG10\",\"MSG12\",\"ACQS1\",\"ACXS1\",\"ANMN6\",\"ANRN6\",\"APQF1\",\"APXA2\",\"BILW3\",\"BRIM2\",\"BSLM2\",\"BVQW1\",\"CHNO3\",\"CHQO3\",\"CWQT2\",\"DBQS1\",\"DEQD1\",\"DRSD1\",\"EAZC1\",\"EHSC1\",\"EVMC1\",\"FFFC1\",\"GBHM6\",\"GBQN3\",\"GBRM6\",\"GDQM6\",\"GGGC1\",\"GTQF1\",\"GTXF1\",\"HBMN6\",\"HMRA2\",\"HUQN6\",\"JCTN4\",\"JOBP4\",\"JOQP4\",\"JOXP4\",\"KCHA2\",\"LTQM2\",\"MIST2\",\"MQMT2\",\"MWQT2\",\"NAQR1\",\"NAXR1\",\"NIQS1\",\"NOXN7\",\"NPQN6\",\"NPXN6\",\"OWDO1\",\"OWQO1\",\"OWSO1\",\"PBLW1\",\"PKBW3\",\"RKQF1\",\"RKXF1\",\"RYEC1\",\"SAQG1\",\"SCQC1\",\"SCQN6\",\"SEQA2\",\"SFXC1\",\"SKQN6\",\"SLOO3\",\"TCSV2\",\"TIQC1\",\"TIXC1\",\"TKPN6\",\"WAQM3\",\"WAXM3\",\"WELM1\",\"WEQM1\",\"WEXM1\",\"WKQA1\",\"WKXA1\",\"WYBS1\",\"NLMA3\",\"SBBN2\",\"SLMN2\",\"BAXC1\",\"BDRN4\",\"BDSP1\",\"BGNN6\",\"BKBF1\",\"BLIF1\",\"BRND1\",\"CHCM2\",\"CHYV2\",\"COVM2\",\"CPMW1\",\"CPNW1\",\"CRYV2\",\"DELD1\",\"DMSF1\",\"DOMV2\",\"DPXC1\",\"EBEF1\",\"FMOA1\",\"FRVM3\",\"FRXM3\",\"FSKM2\",\"FSNM2\",\"GCTF1\",\"LNDC1\",\"LQAT2\",\"LTJF1\",\"MBPA1\",\"MCGA1\",\"MHBT2\",\"MRCP1\",\"MTBF1\",\"MZXC1\",\"NBLP1\",\"NFDF1\",\"NWHC3\",\"OMHC1\",\"OPTF1\",\"PDVR1\",\"PEGF1\",\"PFDC1\",\"PFXC1\",\"PPTM2\",\"PPXC1\",\"PRJC1\",\"PRUR1\",\"PSBC1\",\"PSXC1\",\"PTOA1\",\"PVDR1\",\"PXAC1\",\"PXOC1\",\"PXSC1\",\"QPTR1\",\"RPLV2\",\"RTYC1\",\"SEIM1\",\"SJSN4\",\"SKCF1\",\"SWPM4\",\"TCNW1\",\"TLVT2\",\"TPAF1\",\"TSHF1\",\"TXVT2\",\"UPBC1\",\"WDSV2\",\"ACYN4\",\"ADKA2\",\"AGCM4\",\"ALIA2\",\"ALXN6\",\"AMRL1\",\"APAM2\",\"APCF1\",\"APRP7\",\"ASTO3\",\"ATGM1\",\"ATKA2\",\"BEPB6\",\"BFTN7\",\"BHBM3\",\"BISM2\",\"BKTL1\",\"BLTM2\",\"BYGL1\",\"BZBM3\",\"CAMM2\",\"CAPL1\",\"CARL1\",\"CASM1\",\"CECC1\",\"CFWM1\",\"CHAO3\",\"CHAV3\",\"CHBV2\",\"CHSV3\",\"CHYW1\",\"CLBP4\",\"CMAN4\",\"CMTI2\",\"CNDO1\",\"CRVA2\",\"DILA1\",\"DKCM6\",\"DTLM4\",\"DUKN7\",\"DULM5\",\"EBSW1\",\"ERTF1\",\"ESPP4\",\"FAIO1\",\"FCGT2\",\"FMRF1\",\"FOXR1\",\"FPTT2\",\"FRCB6\",\"FRDF1\",\"FRDW1\",\"FREL1\",\"FRPS1\",\"FTPC1\",\"GBWW3\",\"GCVF1\",\"GDMM5\",\"GISL1\",\"GNJT2\",\"GTOT2\",\"GWPM6\",\"HBYC1\",\"HCGN7\",\"HLNM4\",\"HMDO3\",\"ICAC1\",\"IIWC1\",\"ILOH1\",\"ITKA2\",\"JMPN7\",\"JNEA2\",\"KECA2\",\"KGCA2\",\"KLIH1\",\"KPTN6\",\"KPTV2\",\"KWHH1\",\"KYWF1\",\"LABL1\",\"LAMV3\",\"LAPW1\",\"LCLL1\",\"LDTM4\",\"LOPW1\",\"LPNM4\",\"LTBV3\",\"LTRM4\",\"LWSD1\",\"LWTV2\",\"MBRM4\",\"MCGM4\",\"MCYF1\",\"MEYC1\",\"MGIP4\",\"MGZP4\",\"MOKH1\",\"MQTT2\",\"MRHO1\",\"MROS1\",\"MTKN6\",\"MTYC1\",\"NEAW1\",\"NIAN6\",\"NJLC1\",\"NKTA2\",\"NLNC3\",\"NMTA2\",\"NTBC1\",\"NTKM3\",\"NUET2\",\"NWCL1\",\"NWPR1\",\"NWWH1\",\"OCIM2\",\"OHBC1\",\"OLSA2\",\"OOUH1\",\"ORIN7\",\"OSGN6\",\"PCBF1\",\"PCLF1\",\"PCOC1\",\"PGBP7\",\"PHBP1\",\"PLXA2\",\"PNLM6\",\"PORO3\",\"PRDA2\",\"PRYC1\",\"PSBM1\",\"PSLC1\",\"PTAW1\",\"PTIM4\",\"PTIT2\",\"PTWW1\",\"RARM6\",\"RCKM4\",\"RCYF1\",\"RDDA2\",\"RDYD1\",\"SAPF1\",\"SBEO3\",\"SBLF1\",\"SDBC1\",\"SDHN4\",\"SHBL1\",\"SJNP4\",\"SKTA2\",\"SLIM2\",\"SNDP5\",\"SWLA2\",\"SWPV2\",\"TESL1\",\"THRO1\",\"TLBO3\",\"TRDF1\",\"TXPT2\",\"ULAM6\",\"ULRA2\",\"UNLA2\",\"VAKF1\",\"VDZA2\",\"WAHV2\",\"WAKP8\",\"WASD2\",\"WAVM6\",\"WLON7\",\"WPTW1\",\"WYCM6\",\"YATA2\",\"BLTA2\",\"CDEA2\",\"EROA2\",\"LCNA2\",\"PBPA2\",\"PRTA2\",\"SDIA2\",\"AGMW3\",\"BHRI3\",\"BIGM4\",\"BSBM4\",\"CBRW3\",\"CLSM4\",\"FPTM4\",\"GBLW3\",\"GRMM4\",\"GSLM4\",\"GTLM4\",\"GTRM4\",\"KP53\",\"KP58\",\"KP59\",\"LSCM4\",\"MEEM4\",\"NABM4\",\"PCLM4\",\"PNGW3\",\"PRIM4\",\"PSCM4\",\"PWAW3\",\"SBLM4\",\"SPTM4\",\"SXHW3\",\"SYWW3\",\"TAWM4\",\"WFPM4\",\"BARN6\",\"CBLO1\",\"CHDS1\",\"CMPO1\",\"GELO1\",\"HHLO1\",\"LORO1\",\"NREP1\",\"OLCN6\",\"RPRN6\",\"WATS1\",\"AUDP4\",\"FRDP4\",\"PLSP4\",\"VQSP4\",\"CGCL1\",\"SKMG1\",\"SPAG1\",\"AVAN4\",\"BRBN4\",\"OCGN4\",\"AWRT2\",\"BABT2\",\"BZST2\",\"CLLT2\",\"CPNT2\",\"EMAT2\",\"GRRT2\",\"HIST2\",\"IRDT2\",\"LUIT2\",\"LYBT2\",\"MGPT2\",\"NWST2\",\"PACT2\",\"PCGT2\",\"PCNT2\",\"PMNT2\",\"PORT2\",\"RSJT2\",\"RTAT2\",\"RTOT2\",\"SDRT2\",\"SGNT2\",\"TAQT2\",\"BTHD1\",\"FRFN7\",\"JPRN7\",\"18CI3\",\"20CM4\",\"GDIV2\",\"32ST0\",\"41NT0\"]\nbuoy_ids = ids\nbuoy_ids_with_cameras = [] # blank list to store buoy ids with cameras",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "ids",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "ids = [\"21414\",\"21415\",\"21416\",\"21417\",\"21418\",\"21419\",\"32301\",\"32302\",\"32411\",\"32412\",\"32413\",\"41001\",\"41002\",\"41003\",\"41004\",\"41007\",\"41008\",\"41009\",\"41010\",\"41011\",\"41012\",\"41016\",\"41017\",\"41018\",\"41021\",\"41022\",\"41023\",\"41036\",\"41040\",\"41041\",\"41043\",\"41044\",\"41046\",\"41049\",\"41420\",\"41421\",\"41424\",\"41425\",\"42001\",\"42002\",\"42003\",\"42004\",\"42007\",\"42008\",\"42009\",\"42010\",\"42011\",\"42012\",\"42017\",\"42018\",\"42019\",\"42020\",\"42025\",\"42035\",\"42038\",\"42039\",\"42040\",\"42041\",\"42042\",\"42053\",\"42056\",\"42057\",\"42058\",\"42059\",\"42060\",\"42065\",\"42408\",\"42409\",\"42429\",\"42501\",\"42503\",\"42534\",\"44001\",\"44003\",\"44004\",\"44005\",\"44006\",\"44007\",\"44010\",\"44011\",\"44012\",\"44013\",\"44014\",\"44015\",\"44019\",\"44020\",\"44023\",\"44025\",\"44026\",\"44027\",\"44066\",\"44070\",\"44071\",\"44401\",\"44402\",\"44403\",\"45002\",\"45003\",\"45004\",\"45005\",\"45006\",\"45007\",\"45010\",\"45011\",\"45012\",\"46001\",\"46002\",\"46003\",\"46007\",\"46008\",\"46009\",\"46010\",\"46011\",\"46012\",\"46015\",\"46016\",\"46017\",\"46018\",\"46019\",\"46020\",\"46023\",\"46024\",\"46025\",\"46026\",\"46027\",\"46028\",\"46031\",\"46032\",\"46033\",\"46034\",\"46035\",\"46037\",\"46040\",\"46041\",\"46042\",\"46043\",\"46045\",\"46047\",\"46051\",\"46053\",\"46054\",\"46059\",\"46060\",\"46061\",\"46066\",\"46069\",\"46070\",\"46071\",\"46072\",\"46073\",\"46077\",\"46078\",\"46079\",\"46080\",\"46081\",\"46082\",\"46085\",\"46086\",\"46087\",\"46088\",\"46089\",\"46090\",\"46107\",\"46115\",\"46270\",\"46290\",\"46401\",\"46402\",\"46405\",\"46406\",\"46407\",\"46408\",\"46409\",\"46410\",\"46413\",\"46414\",\"46415\",\"46416\",\"46419\",\"46490\",\"46779\",\"46780\",\"46781\",\"46782\",\"46785\",\"51000\",\"51001\",\"51002\",\"51003\",\"51004\",\"51005\",\"51028\",\"51100\",\"51101\",\"51406\",\"51407\",\"51425\",\"52009\",\"52401\",\"52402\",\"52403\",\"52404\",\"52405\",\"91204\",\"91222\",\"91251\",\"91328\",\"91338\",\"91343\",\"91356\",\"91365\",\"91374\",\"91377\",\"91411\",\"91442\",\"46265\",\"41670\",\"41852\",\"41904\",\"41933\",\"48916\",\"48917\",\"52838\",\"52839\",\"52840\",\"52841\",\"52842\",\"52843\",\"52862\",\"55012\",\"55013\",\"55015\",\"55016\",\"55023\",\"55042\",\"58952\",\"31052\",\"31053\",\"41052\",\"41053\",\"41056\",\"41058\",\"41115\",\"41121\",\"41030\",\"44042\",\"44043\",\"44057\",\"44058\",\"44059\",\"44061\",\"44064\",\"44068\",\"45016\",\"45017\",\"45018\",\"45019\",\"45177\",\"45202\",\"45203\",\"45204\",\"45205\",\"45206\",\"45207\",\"46116\",\"46117\",\"46127\",\"42014\",\"42021\",\"42022\",\"42023\",\"42024\",\"42026\",\"32404\",\"41029\",\"41033\",\"41037\",\"41038\",\"41064\",\"41065\",\"41110\",\"41119\",\"41159\",\"32488\",\"41193\",\"44138\",\"44139\",\"44140\",\"44141\",\"44142\",\"44150\",\"44176\",\"44235\",\"44251\",\"44255\",\"44258\",\"44488\",\"45132\",\"45135\",\"45136\",\"45137\",\"45138\",\"45139\",\"45142\",\"45143\",\"45144\",\"45145\",\"45147\",\"45148\",\"45151\",\"45152\",\"45154\",\"45155\",\"45158\",\"45159\",\"46036\",\"46131\",\"46132\",\"46084\",\"46134\",\"46138\",\"46139\",\"46147\",\"46181\",\"46183\",\"46184\",\"46185\",\"46204\",\"46207\",\"46208\",\"46303\",\"46304\",\"48021\",\"45162\",\"45163\",\"45195\",\"23219\",\"23227\",\"32067\",\"32068\",\"42087\",\"42088\",\"42089\",\"42090\",\"46109\",\"46110\",\"46111\",\"46112\",\"21346\",\"21347\",\"21348\",\"21595\",\"21597\",\"21598\",\"21637\",\"21640\",\"22102\",\"22103\",\"22104\",\"22105\",\"22106\",\"22107\",\"45029\",\"45164\",\"45165\",\"45168\",\"45169\",\"45176\",\"46091\",\"46092\",\"62091\",\"62092\",\"62093\",\"62094\",\"41097\",\"41098\",\"41100\",\"41101\",\"41300\",\"61001\",\"45025\",\"45175\",\"44039\",\"44040\",\"44060\",\"23220\",\"23223\",\"23225\",\"46261\",\"46263\",\"48901\",\"48908\",\"48909\",\"48912\",\"44024\",\"44029\",\"44030\",\"44031\",\"44032\",\"44033\",\"44036\",\"44037\",\"45172\",\"45173\",\"46118\",\"46119\",\"46531\",\"46534\",\"46538\",\"46565\",\"44075\",\"44076\",\"44077\",\"44078\",\"46097\",\"46098\",\"51046\",\"51201\",\"51202\",\"51203\",\"51204\",\"51205\",\"51208\",\"51209\",\"51210\",\"51211\",\"51212\",\"51213\",\"52202\",\"52211\",\"13002\",\"13008\",\"13009\",\"13010\",\"15001\",\"15002\",\"31001\",\"31002\",\"31003\",\"31004\",\"31005\",\"31006\",\"62121\",\"62124\",\"62125\",\"62126\",\"62127\",\"62130\",\"62144\",\"62145\",\"62146\",\"62147\",\"62148\",\"62149\",\"62165\",\"62166\",\"63105\",\"63110\",\"63112\",\"63113\",\"14041\",\"14043\",\"14047\",\"23001\",\"23003\",\"23004\",\"23008\",\"23009\",\"23010\",\"23011\",\"23012\",\"23013\",\"23016\",\"23017\",\"53005\",\"53006\",\"53009\",\"53040\",\"56053\",\"01506\",\"01507\",\"01518\",\"01537\",\"48904\",\"48907\",\"01521\",\"01522\",\"01523\",\"01524\",\"01526\",\"01531\",\"01535\",\"01536\",\"01538\",\"01909\",\"01910\",\"31201\",\"41112\",\"41113\",\"41114\",\"41116\",\"41118\",\"41120\",\"42084\",\"42091\",\"42094\",\"42099\",\"44088\",\"44094\",\"44099\",\"44100\",\"44172\",\"46114\",\"46211\",\"46212\",\"46215\",\"46216\",\"46217\",\"46218\",\"46219\",\"46220\",\"46223\",\"46224\",\"46225\",\"46226\",\"46227\",\"46228\",\"46231\",\"46232\",\"46234\",\"46235\",\"46236\",\"46237\",\"46240\",\"46241\",\"46242\",\"46243\",\"46244\",\"46245\",\"46249\",\"46250\",\"46251\",\"46253\",\"46254\",\"46256\",\"46262\",\"46267\",\"46268\",\"46269\",\"46273\",\"46274\",\"51200\",\"48212\",\"48213\",\"48214\",\"48677\",\"48678\",\"48679\",\"48680\",\"48911\",\"42044\",\"42045\",\"42046\",\"42047\",\"42048\",\"42049\",\"42078\",\"42079\",\"42093\",\"42095\",\"42097\",\"44056\",\"45180\",\"46259\",\"46266\",\"62028\",\"62029\",\"62030\",\"62050\",\"62081\",\"62103\",\"62108\",\"62163\",\"62170\",\"62298\",\"62301\",\"62303\",\"62442\",\"64045\",\"44098\",\"46121\",\"46122\",\"46123\",\"46124\",\"28902\",\"28903\",\"28904\",\"28906\",\"28907\",\"28908\",\"58900\",\"58902\",\"58903\",\"58904\",\"58905\",\"58906\",\"58909\",\"68900\",\"78900\",\"45014\",\"45184\",\"44053\",\"01517\",\"32012\",\"41060\",\"41061\",\"21D20\",\"32D12\",\"32D13\",\"41A46\",\"41S43\",\"41S46\",\"46B35\",\"ALSN6\",\"AMAA2\",\"AUGA2\",\"BLIA2\",\"BURL1\",\"BUSL1\",\"CDRF1\",\"CHLV2\",\"CLKN7\",\"CSBF1\",\"DBLN6\",\"DESW1\",\"DRFA2\",\"DRYF1\",\"DSLN7\",\"DUCN7\",\"EB01\",\"EB10\",\"EB33\",\"EB35\",\"EB36\",\"EB43\",\"EB52\",\"EB53\",\"EB70\",\"EB90\",\"EB91\",\"EB92\",\"FARP2\",\"FBIS1\",\"FPSN7\",\"FWYF1\",\"GBCL1\",\"GDIL1\",\"GLLN6\",\"IOSN3\",\"LONF1\",\"LPOI1\",\"MDRM1\",\"MISM1\",\"MLRF1\",\"MPCL1\",\"PILA2\",\"PILM4\",\"PLSF1\",\"POTA2\",\"PTAC1\",\"PTAT2\",\"SANF1\",\"SAUF1\",\"SBIO1\",\"SGNW3\",\"SGOF1\",\"SISW1\",\"SPGF1\",\"SRST2\",\"STDM4\",\"SUPN6\",\"SVLS1\",\"THIN6\",\"VENF1\",\"HBXC1\",\"MYXC1\",\"TDPC1\",\"FSTI2\",\"DMNO3\",\"GPTW1\",\"HMNO3\",\"PRTO3\",\"SEFO3\",\"SETO3\",\"SRAW1\",\"SRFW1\",\"TANO3\",\"ANMF1\",\"ARPF1\",\"BGCF1\",\"CAMF1\",\"CLBF1\",\"EGKF1\",\"NFBF1\",\"PTRF1\",\"SHPF1\",\"MBIN7\",\"MBNN7\",\"OCPN7\",\"BSCA1\",\"CRTA1\",\"DPHA1\",\"KATA1\",\"MBLA1\",\"MHPA1\",\"SACV4\",\"BBSF1\",\"BDVF1\",\"BKYF1\",\"BNKF1\",\"BOBF1\",\"BSKF1\",\"CNBF1\",\"CWAF1\",\"DKKF1\",\"GBIF1\",\"GBTF1\",\"GKYF1\",\"JBYF1\",\"JKYF1\",\"LBRF1\",\"LBSF1\",\"LMDF1\",\"LMRF1\",\"LSNF1\",\"MDKF1\",\"MNBF1\",\"MUKF1\",\"NRRF1\",\"PKYF1\",\"TCVF1\",\"THRF1\",\"TPEF1\",\"TRRF1\",\"WIWF1\",\"WPLF1\",\"APNM4\",\"CHII2\",\"MCYI3\",\"SRLM4\",\"SVNM4\",\"TBIM4\",\"THLO1\",\"LCIY2\",\"LLBP7\",\"FWIC3\",\"MISC3\",\"MISN6\",\"NCSC3\",\"NOSC3\",\"OFPN6\",\"ILDL1\",\"MRSL1\",\"SIPM6\",\"SLPL1\",\"LUML1\",\"TAML1\",\"AKXA2\",\"APMA2\",\"BEXA2\",\"CDXA2\",\"CPXA2\",\"DHXA2\",\"DPXA2\",\"ERXA2\",\"GBXA2\",\"GEXA2\",\"GIXA2\",\"GPXA2\",\"HMSA2\",\"ICYA2\",\"JLXA2\",\"JMLA2\",\"JNGA2\",\"KEXA2\",\"KNXA2\",\"KOZA2\",\"LIXA2\",\"MIXA2\",\"MRNA2\",\"MRYA2\",\"NKLA2\",\"NKXA2\",\"NLXA2\",\"NMXA2\",\"NSXA2\",\"PAUA2\",\"PEXA2\",\"PGXA2\",\"PPXA2\",\"PTLA2\",\"RIXA2\",\"SCXA2\",\"SIXA2\",\"SKXA2\",\"SLXA2\",\"SPXA2\",\"SRXA2\",\"STXA2\",\"SXXA2\",\"TKEA2\",\"TPXA2\",\"UQXA2\",\"VDXA2\",\"WCXA2\",\"MSG10\",\"MSG12\",\"ACQS1\",\"ACXS1\",\"ANMN6\",\"ANRN6\",\"APQF1\",\"APXA2\",\"BILW3\",\"BRIM2\",\"BSLM2\",\"BVQW1\",\"CHNO3\",\"CHQO3\",\"CWQT2\",\"DBQS1\",\"DEQD1\",\"DRSD1\",\"EAZC1\",\"EHSC1\",\"EVMC1\",\"FFFC1\",\"GBHM6\",\"GBQN3\",\"GBRM6\",\"GDQM6\",\"GGGC1\",\"GTQF1\",\"GTXF1\",\"HBMN6\",\"HMRA2\",\"HUQN6\",\"JCTN4\",\"JOBP4\",\"JOQP4\",\"JOXP4\",\"KCHA2\",\"LTQM2\",\"MIST2\",\"MQMT2\",\"MWQT2\",\"NAQR1\",\"NAXR1\",\"NIQS1\",\"NOXN7\",\"NPQN6\",\"NPXN6\",\"OWDO1\",\"OWQO1\",\"OWSO1\",\"PBLW1\",\"PKBW3\",\"RKQF1\",\"RKXF1\",\"RYEC1\",\"SAQG1\",\"SCQC1\",\"SCQN6\",\"SEQA2\",\"SFXC1\",\"SKQN6\",\"SLOO3\",\"TCSV2\",\"TIQC1\",\"TIXC1\",\"TKPN6\",\"WAQM3\",\"WAXM3\",\"WELM1\",\"WEQM1\",\"WEXM1\",\"WKQA1\",\"WKXA1\",\"WYBS1\",\"NLMA3\",\"SBBN2\",\"SLMN2\",\"BAXC1\",\"BDRN4\",\"BDSP1\",\"BGNN6\",\"BKBF1\",\"BLIF1\",\"BRND1\",\"CHCM2\",\"CHYV2\",\"COVM2\",\"CPMW1\",\"CPNW1\",\"CRYV2\",\"DELD1\",\"DMSF1\",\"DOMV2\",\"DPXC1\",\"EBEF1\",\"FMOA1\",\"FRVM3\",\"FRXM3\",\"FSKM2\",\"FSNM2\",\"GCTF1\",\"LNDC1\",\"LQAT2\",\"LTJF1\",\"MBPA1\",\"MCGA1\",\"MHBT2\",\"MRCP1\",\"MTBF1\",\"MZXC1\",\"NBLP1\",\"NFDF1\",\"NWHC3\",\"OMHC1\",\"OPTF1\",\"PDVR1\",\"PEGF1\",\"PFDC1\",\"PFXC1\",\"PPTM2\",\"PPXC1\",\"PRJC1\",\"PRUR1\",\"PSBC1\",\"PSXC1\",\"PTOA1\",\"PVDR1\",\"PXAC1\",\"PXOC1\",\"PXSC1\",\"QPTR1\",\"RPLV2\",\"RTYC1\",\"SEIM1\",\"SJSN4\",\"SKCF1\",\"SWPM4\",\"TCNW1\",\"TLVT2\",\"TPAF1\",\"TSHF1\",\"TXVT2\",\"UPBC1\",\"WDSV2\",\"ACYN4\",\"ADKA2\",\"AGCM4\",\"ALIA2\",\"ALXN6\",\"AMRL1\",\"APAM2\",\"APCF1\",\"APRP7\",\"ASTO3\",\"ATGM1\",\"ATKA2\",\"BEPB6\",\"BFTN7\",\"BHBM3\",\"BISM2\",\"BKTL1\",\"BLTM2\",\"BYGL1\",\"BZBM3\",\"CAMM2\",\"CAPL1\",\"CARL1\",\"CASM1\",\"CECC1\",\"CFWM1\",\"CHAO3\",\"CHAV3\",\"CHBV2\",\"CHSV3\",\"CHYW1\",\"CLBP4\",\"CMAN4\",\"CMTI2\",\"CNDO1\",\"CRVA2\",\"DILA1\",\"DKCM6\",\"DTLM4\",\"DUKN7\",\"DULM5\",\"EBSW1\",\"ERTF1\",\"ESPP4\",\"FAIO1\",\"FCGT2\",\"FMRF1\",\"FOXR1\",\"FPTT2\",\"FRCB6\",\"FRDF1\",\"FRDW1\",\"FREL1\",\"FRPS1\",\"FTPC1\",\"GBWW3\",\"GCVF1\",\"GDMM5\",\"GISL1\",\"GNJT2\",\"GTOT2\",\"GWPM6\",\"HBYC1\",\"HCGN7\",\"HLNM4\",\"HMDO3\",\"ICAC1\",\"IIWC1\",\"ILOH1\",\"ITKA2\",\"JMPN7\",\"JNEA2\",\"KECA2\",\"KGCA2\",\"KLIH1\",\"KPTN6\",\"KPTV2\",\"KWHH1\",\"KYWF1\",\"LABL1\",\"LAMV3\",\"LAPW1\",\"LCLL1\",\"LDTM4\",\"LOPW1\",\"LPNM4\",\"LTBV3\",\"LTRM4\",\"LWSD1\",\"LWTV2\",\"MBRM4\",\"MCGM4\",\"MCYF1\",\"MEYC1\",\"MGIP4\",\"MGZP4\",\"MOKH1\",\"MQTT2\",\"MRHO1\",\"MROS1\",\"MTKN6\",\"MTYC1\",\"NEAW1\",\"NIAN6\",\"NJLC1\",\"NKTA2\",\"NLNC3\",\"NMTA2\",\"NTBC1\",\"NTKM3\",\"NUET2\",\"NWCL1\",\"NWPR1\",\"NWWH1\",\"OCIM2\",\"OHBC1\",\"OLSA2\",\"OOUH1\",\"ORIN7\",\"OSGN6\",\"PCBF1\",\"PCLF1\",\"PCOC1\",\"PGBP7\",\"PHBP1\",\"PLXA2\",\"PNLM6\",\"PORO3\",\"PRDA2\",\"PRYC1\",\"PSBM1\",\"PSLC1\",\"PTAW1\",\"PTIM4\",\"PTIT2\",\"PTWW1\",\"RARM6\",\"RCKM4\",\"RCYF1\",\"RDDA2\",\"RDYD1\",\"SAPF1\",\"SBEO3\",\"SBLF1\",\"SDBC1\",\"SDHN4\",\"SHBL1\",\"SJNP4\",\"SKTA2\",\"SLIM2\",\"SNDP5\",\"SWLA2\",\"SWPV2\",\"TESL1\",\"THRO1\",\"TLBO3\",\"TRDF1\",\"TXPT2\",\"ULAM6\",\"ULRA2\",\"UNLA2\",\"VAKF1\",\"VDZA2\",\"WAHV2\",\"WAKP8\",\"WASD2\",\"WAVM6\",\"WLON7\",\"WPTW1\",\"WYCM6\",\"YATA2\",\"BLTA2\",\"CDEA2\",\"EROA2\",\"LCNA2\",\"PBPA2\",\"PRTA2\",\"SDIA2\",\"AGMW3\",\"BHRI3\",\"BIGM4\",\"BSBM4\",\"CBRW3\",\"CLSM4\",\"FPTM4\",\"GBLW3\",\"GRMM4\",\"GSLM4\",\"GTLM4\",\"GTRM4\",\"KP53\",\"KP58\",\"KP59\",\"LSCM4\",\"MEEM4\",\"NABM4\",\"PCLM4\",\"PNGW3\",\"PRIM4\",\"PSCM4\",\"PWAW3\",\"SBLM4\",\"SPTM4\",\"SXHW3\",\"SYWW3\",\"TAWM4\",\"WFPM4\",\"BARN6\",\"CBLO1\",\"CHDS1\",\"CMPO1\",\"GELO1\",\"HHLO1\",\"LORO1\",\"NREP1\",\"OLCN6\",\"RPRN6\",\"WATS1\",\"AUDP4\",\"FRDP4\",\"PLSP4\",\"VQSP4\",\"CGCL1\",\"SKMG1\",\"SPAG1\",\"AVAN4\",\"BRBN4\",\"OCGN4\",\"AWRT2\",\"BABT2\",\"BZST2\",\"CLLT2\",\"CPNT2\",\"EMAT2\",\"GRRT2\",\"HIST2\",\"IRDT2\",\"LUIT2\",\"LYBT2\",\"MGPT2\",\"NWST2\",\"PACT2\",\"PCGT2\",\"PCNT2\",\"PMNT2\",\"PORT2\",\"RSJT2\",\"RTAT2\",\"RTOT2\",\"SDRT2\",\"SGNT2\",\"TAQT2\",\"BTHD1\",\"FRFN7\",\"JPRN7\",\"18CI3\",\"20CM4\",\"GDIV2\",\"32ST0\",\"41NT0\"]\nbuoy_ids = ids\nbuoy_ids_with_cameras = [] # blank list to store buoy ids with cameras\n# %%\n# Loop through the buoy ids\nfor buoy_id in tqdm(buoy_ids):\n    # if the page text needs to be retrieved then do so, else pull from the text files\n    if not os.path.exists('data/buoy_pages/{}.txt'.format(buoy_id)):\n        # get the page text\n        time.sleep(1)",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "buoy_ids",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "buoy_ids = ids\nbuoy_ids_with_cameras = [] # blank list to store buoy ids with cameras\n# %%\n# Loop through the buoy ids\nfor buoy_id in tqdm(buoy_ids):\n    # if the page text needs to be retrieved then do so, else pull from the text files\n    if not os.path.exists('data/buoy_pages/{}.txt'.format(buoy_id)):\n        # get the page text\n        time.sleep(1)\n        page = requests.get('https://www.ndbc.noaa.gov/station_page.php?station={}'.format(buoy_id))",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "buoy_ids_with_cameras",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "buoy_ids_with_cameras = [] # blank list to store buoy ids with cameras\n# %%\n# Loop through the buoy ids\nfor buoy_id in tqdm(buoy_ids):\n    # if the page text needs to be retrieved then do so, else pull from the text files\n    if not os.path.exists('data/buoy_pages/{}.txt'.format(buoy_id)):\n        # get the page text\n        time.sleep(1)\n        page = requests.get('https://www.ndbc.noaa.gov/station_page.php?station={}'.format(buoy_id))\n        # write the page text to a file",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "cam_buoys",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "cam_buoys = [] # blank list to store buoy ids with cameras\n# %%\n# Purpose: parse the page text to get the camera urls and save them to a file. The page is parsed using BeautifulSoup and the camera urls are extracted using regular expressions.\n# only do this once to get the camera urls and save them to a file for later use\n# if the file does not exist then do so, else pull from the file\n#note: uncomment below if error but it takes forever.\n# if not os.path.exists('data/cam_buoys.txt'):\n#     # open each buoy page text file in data/buoy_pages and parse the page text\n#     for buoy_page in tqdm(os.listdir('data/buoy_pages')):\n#         with open('data/buoy_pages/{}'.format(buoy_page), 'r') as f:",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "#cam_buoys",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "#cam_buoys = pd.read_csv('data/buoys.csv') # read the cam_buoys from data/buoys.csv\n# %%\n# Purpose: get the camera urls from the buoy pages and save them to a file\n# open each buoy page text file in data/buoy_pages and parse the page text to get the camera urls\n# print(f'Found {len(cam_buoys)} buoys with functional cameras.')\n# # save them to the file data/buoys.csv\n# with open('data/buoys.csv', 'w+') as f:\n#     f.write(\"'buoy_id',\\n\") # could add lat and lng later\n#     for buoy_id in cam_buoys: # loop through the buoy ids with cameras\n#         f.write('{},\\n'.format(buoy_id)) # write the buoy id to the file",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "cam_urls",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "cam_urls = pd.read_csv('data/camera_urls.csv') # read the cam_buoys from data/buoys.csv\ncam_buoys = pd.read_csv('data/buoy_ids_with_cameras.txt') # read the cam_buoys from data/buoys.csv\n# %%\ndef panel_sorter():\n    # Go into each panel directory and sort the images into folders by the date in their filename (if they haven't already been sorted)\n    # example unsorted directory: 'images/panels/46078/2022_11_5_15_44_panel_1.png'\n    # example sorted directory: images/panels/51000/2022_11_5_15_44/panel_1.png\n    for buoy_id in os.listdir('images/panels'):\n        if buoy_id != '.DS_Store' and '.' not in buoy_id:\n            for image in os.listdir('images/panels/{}'.format(buoy_id)):",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "cam_buoys",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "cam_buoys = pd.read_csv('data/buoy_ids_with_cameras.txt') # read the cam_buoys from data/buoys.csv\n# %%\ndef panel_sorter():\n    # Go into each panel directory and sort the images into folders by the date in their filename (if they haven't already been sorted)\n    # example unsorted directory: 'images/panels/46078/2022_11_5_15_44_panel_1.png'\n    # example sorted directory: images/panels/51000/2022_11_5_15_44/panel_1.png\n    for buoy_id in os.listdir('images/panels'):\n        if buoy_id != '.DS_Store' and '.' not in buoy_id:\n            for image in os.listdir('images/panels/{}'.format(buoy_id)):\n                if image != '.DS_Store' and '.' not in image:",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "buoy_update_rates_dict",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "buoy_update_rates_dict = {} # blank dictionary to store the update rates for each buoy (i.e. how often the buoy takes a picture (measured in seconds))\n# fill the dictionary with blank update rate arrays for each buoy.\n# these arrays will be averaged to get the average update rate for each buoy in real time.\nfor buoy_id in cam_buoys:\n    buoy_update_rates_dict[buoy_id] = 1 # set the initial update rate to 600 seconds (10 minutes)\n# %%\ndef image_has_changed(image_one,image_two):\n    # looks for changes between two images and returns True if there are changes and False if there are not.\n    # this function is used to determine what rate the images are being updated for each buoy.\n    # if the images are not changing, then the buoy is not updating the images.",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "buoy_update_rates_dict",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "buoy_update_rates_dict = {'46025': [600, datetime.datetime.now()]}\nprint(check_for_updates(buoy_update_rates_dict)) # should return an empty list\n# wait 10 seconds\ntime.sleep(10)\nprint(check_for_updates(buoy_update_rates_dict)) # should return ['46025']\n# %%\n# import shutil\n# from difPy import dif\n# # go through each buoy and check if there are duplicated images in the images/buoys folder\n# for folder in os.listdir('images/buoys'):",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "iteration_counter",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "iteration_counter = 0\nvincent = Artist() # create an instance of the Artist class\n# %%\n# print('Starting the download loop')\n# last_time_fetched = time.time() # get the current time\n# first_run = True # set a flag to indicate that this is the first run of the loop (for the first run, we will download rss feeds for all the buoys)\n# while True:\n#     try:\n#         # turn on at 4 am CST and turn off at 11 pm CST\n#         if datetime.datetime.now().hour < 4 or datetime.datetime.now().hour > 22: # if it is before 4 am or after 11 pm",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "vincent",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "vincent = Artist() # create an instance of the Artist class\n# %%\n# print('Starting the download loop')\n# last_time_fetched = time.time() # get the current time\n# first_run = True # set a flag to indicate that this is the first run of the loop (for the first run, we will download rss feeds for all the buoys)\n# while True:\n#     try:\n#         # turn on at 4 am CST and turn off at 11 pm CST\n#         if datetime.datetime.now().hour < 4 or datetime.datetime.now().hour > 22: # if it is before 4 am or after 11 pm\n#             # wait to turn on until 4 am CST",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "#path",
        "kind": 5,
        "importPath": "cam_backend",
        "description": "cam_backend",
        "peekOfCode": "#path = 'images/panels/46066/2022_11_5_15_45/2022_11_5_15_45_panel_1.png'\n#print(is_it_daytime(path))",
        "detail": "cam_backend",
        "documentation": {}
    },
    {
        "label": "Artist",
        "kind": 6,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "class Artist:\n    def __init__(self):\n        self.folder = 'images'\n    def make_panorama(self, images):\n        # this function will take a list of images and make a panorama out of them\n        # resize image\n        scale_percent = 70 # percent of original size\n        images = [cv2.resize(images[i], (int(images[i].shape[1]*scale_percent/100), int(images[i].shape[0]*scale_percent/100)), interpolation= cv2.INTER_AREA) for i in range(len(images))]\n        # create a list of the images\n        # print('Making a panorama...')",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "panel_sorter",
        "kind": 2,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "def panel_sorter():\n    # Go into each panel directory and sort the images into folders by the date in their filename (if they haven't already been sorted)\n    # example unsorted directory: 'images/panels/46078/2022_11_5_15_44_panel_1.png'\n    # example sorted directory: images/panels/51000/2022_11_5_15_44/panel_1.png\n    for buoy_id in os.listdir('images/panels'):\n        if buoy_id != '.DS_Store' and '.' not in buoy_id:\n            for image in os.listdir('images/panels/{}'.format(buoy_id)):\n                if image != '.DS_Store' and '.' not in image:\n                    try:\n                        # find the 2022_11_5_15_44 (#_#_#_#_#) part of the filename and make a new folder with that name.",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "divide_into_panels",
        "kind": 2,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "def divide_into_panels(buoy_id, image_file):\n    # divide the image into six panels, as dictated in the image processing pipeline for NOAA Buoy Cameras Comments above.\n    # read the image\n    img = cv2.imread(image_file)\n    # get the name of the image file\n    image_name = image_file.split('/')[-1]\n    # get the dimensions of the image\n    height, width, channels = img.shape\n    # Before dividing into panels, crop the image to remove 30 pixels from the bottom of the image.\n    # This is to remove the \"Buoy Camera\" text from the image.",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "is_it_daytime",
        "kind": 2,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "def is_it_daytime(image_path):\n    # This function will take an image path and return True if it is daytime and False if it is nighttime.\n    # The image path should be a string.\n    # The image path should be the path to the image that was used to create the panels.\n    # The image path should be in the format 'images/buoys/46025/2019_12_12_12_12.jpg'\n    # get the image\n    img = Image.open(image_path)\n    # get the image size\n    width, height = img.size\n    # get the pixel values for the center of the image",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "image_has_changed",
        "kind": 2,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "def image_has_changed(image_one,image_two):\n    # looks for changes between two images and returns True if there are changes and False if there are not.\n    # this function is used to determine what rate the images are being updated for each buoy.\n    # if the images are not changing, then the buoy is not updating the images.\n    # if the images are changing, then the buoy is updating the images.\n    try:\n        image_one = cv2.imread(image_one)\n        image_two = cv2.imread(image_two)\n        difference = cv2.subtract(image_one, image_two)\n        result = not np.any(difference)",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "artist_eval",
        "kind": 2,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "def artist_eval(image_path):\n    # get the image\n    img = Image.open(image_path)\n    # get the image size\n    width, height = img.size\n    # get the pixel values for the center of the image\n    pixel_values = img.getpixel((int(width/2), int(height/2)))\n    # get the pixel values for the top left corner of the image\n    upper_left = img.getpixel((0, 0))\n    # get the pixel values for the top right corner of the image",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "check_for_updates",
        "kind": 2,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "def check_for_updates(buoy_update_rates_dict):\n    # Check the buoy_update_rates_dict to see if any of the buoys satistfy the update rate requirements:\n    # Requirements: the current time minus the last time we downloaded an image for this buoy must be greater than the update rate for this buoy. If it is, then we will add the buoy id to the list of buoys that need to be updated and return it to the main function.\n    # If the buoy_update_rates_dict is empty, then we will return an empty list.\n    # If the buoy_update_rates_dict is not empty, then we will check the update rates for each buoy and return a list of the buoy ids that need to be updated.\n    if len(buoy_update_rates_dict) == 0:\n        return []\n    else:\n        buoys_to_update = []\n        for buoy_id in buoy_update_rates_dict:",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "get_latest_data",
        "kind": 2,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "def get_latest_data():\n    url = \"https://www.ndbc.noaa.gov/data/latest_obs/latest_obs.txt\"\n    s=requests.get(url).content\n    # the table contains two rows that have header data. combine them into one row.\n    df = pd.read_csv(io.StringIO(s.decode('utf-8')), sep='\\s+')\n    df.columns = df.columns.str.strip()\n    # df = df.dropna(axis=1, how='all')\n    # df = df.dropna(axis=0, how='all')\n    # df = df.dropna(axis=0, how='any')\n    # df = df.reset_index(drop=True)",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "cam_buoys",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "cam_buoys = []\n# %%\n# Set up #logging file\n#logging.basicConfig(filename='cam_finder.log', level=#logging.INFO)\n# %% [markdown]\n# Stage One\n# %%\nids = [\"21414\",\"21415\",\"21416\",\"21417\",\"21418\",\"21419\",\"32301\",\"32302\",\"32411\",\"32412\",\"32413\",\"41001\",\"41002\",\"41003\",\"41004\",\"41007\",\"41008\",\"41009\",\"41010\",\"41011\",\"41012\",\"41016\",\"41017\",\"41018\",\"41021\",\"41022\",\"41023\",\"41036\",\"41040\",\"41041\",\"41043\",\"41044\",\"41046\",\"41049\",\"41420\",\"41421\",\"41424\",\"41425\",\"42001\",\"42002\",\"42003\",\"42004\",\"42007\",\"42008\",\"42009\",\"42010\",\"42011\",\"42012\",\"42017\",\"42018\",\"42019\",\"42020\",\"42025\",\"42035\",\"42038\",\"42039\",\"42040\",\"42041\",\"42042\",\"42053\",\"42056\",\"42057\",\"42058\",\"42059\",\"42060\",\"42065\",\"42408\",\"42409\",\"42429\",\"42501\",\"42503\",\"42534\",\"44001\",\"44003\",\"44004\",\"44005\",\"44006\",\"44007\",\"44010\",\"44011\",\"44012\",\"44013\",\"44014\",\"44015\",\"44019\",\"44020\",\"44023\",\"44025\",\"44026\",\"44027\",\"44066\",\"44070\",\"44071\",\"44401\",\"44402\",\"44403\",\"45002\",\"45003\",\"45004\",\"45005\",\"45006\",\"45007\",\"45010\",\"45011\",\"45012\",\"46001\",\"46002\",\"46003\",\"46007\",\"46008\",\"46009\",\"46010\",\"46011\",\"46012\",\"46015\",\"46016\",\"46017\",\"46018\",\"46019\",\"46020\",\"46023\",\"46024\",\"46025\",\"46026\",\"46027\",\"46028\",\"46031\",\"46032\",\"46033\",\"46034\",\"46035\",\"46037\",\"46040\",\"46041\",\"46042\",\"46043\",\"46045\",\"46047\",\"46051\",\"46053\",\"46054\",\"46059\",\"46060\",\"46061\",\"46066\",\"46069\",\"46070\",\"46071\",\"46072\",\"46073\",\"46077\",\"46078\",\"46079\",\"46080\",\"46081\",\"46082\",\"46085\",\"46086\",\"46087\",\"46088\",\"46089\",\"46090\",\"46107\",\"46115\",\"46270\",\"46290\",\"46401\",\"46402\",\"46405\",\"46406\",\"46407\",\"46408\",\"46409\",\"46410\",\"46413\",\"46414\",\"46415\",\"46416\",\"46419\",\"46490\",\"46779\",\"46780\",\"46781\",\"46782\",\"46785\",\"51000\",\"51001\",\"51002\",\"51003\",\"51004\",\"51005\",\"51028\",\"51100\",\"51101\",\"51406\",\"51407\",\"51425\",\"52009\",\"52401\",\"52402\",\"52403\",\"52404\",\"52405\",\"91204\",\"91222\",\"91251\",\"91328\",\"91338\",\"91343\",\"91356\",\"91365\",\"91374\",\"91377\",\"91411\",\"91442\",\"46265\",\"41670\",\"41852\",\"41904\",\"41933\",\"48916\",\"48917\",\"52838\",\"52839\",\"52840\",\"52841\",\"52842\",\"52843\",\"52862\",\"55012\",\"55013\",\"55015\",\"55016\",\"55023\",\"55042\",\"58952\",\"31052\",\"31053\",\"41052\",\"41053\",\"41056\",\"41058\",\"41115\",\"41121\",\"41030\",\"44042\",\"44043\",\"44057\",\"44058\",\"44059\",\"44061\",\"44064\",\"44068\",\"45016\",\"45017\",\"45018\",\"45019\",\"45177\",\"45202\",\"45203\",\"45204\",\"45205\",\"45206\",\"45207\",\"46116\",\"46117\",\"46127\",\"42014\",\"42021\",\"42022\",\"42023\",\"42024\",\"42026\",\"32404\",\"41029\",\"41033\",\"41037\",\"41038\",\"41064\",\"41065\",\"41110\",\"41119\",\"41159\",\"32488\",\"41193\",\"44138\",\"44139\",\"44140\",\"44141\",\"44142\",\"44150\",\"44176\",\"44235\",\"44251\",\"44255\",\"44258\",\"44488\",\"45132\",\"45135\",\"45136\",\"45137\",\"45138\",\"45139\",\"45142\",\"45143\",\"45144\",\"45145\",\"45147\",\"45148\",\"45151\",\"45152\",\"45154\",\"45155\",\"45158\",\"45159\",\"46036\",\"46131\",\"46132\",\"46084\",\"46134\",\"46138\",\"46139\",\"46147\",\"46181\",\"46183\",\"46184\",\"46185\",\"46204\",\"46207\",\"46208\",\"46303\",\"46304\",\"48021\",\"45162\",\"45163\",\"45195\",\"23219\",\"23227\",\"32067\",\"32068\",\"42087\",\"42088\",\"42089\",\"42090\",\"46109\",\"46110\",\"46111\",\"46112\",\"21346\",\"21347\",\"21348\",\"21595\",\"21597\",\"21598\",\"21637\",\"21640\",\"22102\",\"22103\",\"22104\",\"22105\",\"22106\",\"22107\",\"45029\",\"45164\",\"45165\",\"45168\",\"45169\",\"45176\",\"46091\",\"46092\",\"62091\",\"62092\",\"62093\",\"62094\",\"41097\",\"41098\",\"41100\",\"41101\",\"41300\",\"61001\",\"45025\",\"45175\",\"44039\",\"44040\",\"44060\",\"23220\",\"23223\",\"23225\",\"46261\",\"46263\",\"48901\",\"48908\",\"48909\",\"48912\",\"44024\",\"44029\",\"44030\",\"44031\",\"44032\",\"44033\",\"44036\",\"44037\",\"45172\",\"45173\",\"46118\",\"46119\",\"46531\",\"46534\",\"46538\",\"46565\",\"44075\",\"44076\",\"44077\",\"44078\",\"46097\",\"46098\",\"51046\",\"51201\",\"51202\",\"51203\",\"51204\",\"51205\",\"51208\",\"51209\",\"51210\",\"51211\",\"51212\",\"51213\",\"52202\",\"52211\",\"13002\",\"13008\",\"13009\",\"13010\",\"15001\",\"15002\",\"31001\",\"31002\",\"31003\",\"31004\",\"31005\",\"31006\",\"62121\",\"62124\",\"62125\",\"62126\",\"62127\",\"62130\",\"62144\",\"62145\",\"62146\",\"62147\",\"62148\",\"62149\",\"62165\",\"62166\",\"63105\",\"63110\",\"63112\",\"63113\",\"14041\",\"14043\",\"14047\",\"23001\",\"23003\",\"23004\",\"23008\",\"23009\",\"23010\",\"23011\",\"23012\",\"23013\",\"23016\",\"23017\",\"53005\",\"53006\",\"53009\",\"53040\",\"56053\",\"01506\",\"01507\",\"01518\",\"01537\",\"48904\",\"48907\",\"01521\",\"01522\",\"01523\",\"01524\",\"01526\",\"01531\",\"01535\",\"01536\",\"01538\",\"01909\",\"01910\",\"31201\",\"41112\",\"41113\",\"41114\",\"41116\",\"41118\",\"41120\",\"42084\",\"42091\",\"42094\",\"42099\",\"44088\",\"44094\",\"44099\",\"44100\",\"44172\",\"46114\",\"46211\",\"46212\",\"46215\",\"46216\",\"46217\",\"46218\",\"46219\",\"46220\",\"46223\",\"46224\",\"46225\",\"46226\",\"46227\",\"46228\",\"46231\",\"46232\",\"46234\",\"46235\",\"46236\",\"46237\",\"46240\",\"46241\",\"46242\",\"46243\",\"46244\",\"46245\",\"46249\",\"46250\",\"46251\",\"46253\",\"46254\",\"46256\",\"46262\",\"46267\",\"46268\",\"46269\",\"46273\",\"46274\",\"51200\",\"48212\",\"48213\",\"48214\",\"48677\",\"48678\",\"48679\",\"48680\",\"48911\",\"42044\",\"42045\",\"42046\",\"42047\",\"42048\",\"42049\",\"42078\",\"42079\",\"42093\",\"42095\",\"42097\",\"44056\",\"45180\",\"46259\",\"46266\",\"62028\",\"62029\",\"62030\",\"62050\",\"62081\",\"62103\",\"62108\",\"62163\",\"62170\",\"62298\",\"62301\",\"62303\",\"62442\",\"64045\",\"44098\",\"46121\",\"46122\",\"46123\",\"46124\",\"28902\",\"28903\",\"28904\",\"28906\",\"28907\",\"28908\",\"58900\",\"58902\",\"58903\",\"58904\",\"58905\",\"58906\",\"58909\",\"68900\",\"78900\",\"45014\",\"45184\",\"44053\",\"01517\",\"32012\",\"41060\",\"41061\",\"21D20\",\"32D12\",\"32D13\",\"41A46\",\"41S43\",\"41S46\",\"46B35\",\"ALSN6\",\"AMAA2\",\"AUGA2\",\"BLIA2\",\"BURL1\",\"BUSL1\",\"CDRF1\",\"CHLV2\",\"CLKN7\",\"CSBF1\",\"DBLN6\",\"DESW1\",\"DRFA2\",\"DRYF1\",\"DSLN7\",\"DUCN7\",\"EB01\",\"EB10\",\"EB33\",\"EB35\",\"EB36\",\"EB43\",\"EB52\",\"EB53\",\"EB70\",\"EB90\",\"EB91\",\"EB92\",\"FARP2\",\"FBIS1\",\"FPSN7\",\"FWYF1\",\"GBCL1\",\"GDIL1\",\"GLLN6\",\"IOSN3\",\"LONF1\",\"LPOI1\",\"MDRM1\",\"MISM1\",\"MLRF1\",\"MPCL1\",\"PILA2\",\"PILM4\",\"PLSF1\",\"POTA2\",\"PTAC1\",\"PTAT2\",\"SANF1\",\"SAUF1\",\"SBIO1\",\"SGNW3\",\"SGOF1\",\"SISW1\",\"SPGF1\",\"SRST2\",\"STDM4\",\"SUPN6\",\"SVLS1\",\"THIN6\",\"VENF1\",\"HBXC1\",\"MYXC1\",\"TDPC1\",\"FSTI2\",\"DMNO3\",\"GPTW1\",\"HMNO3\",\"PRTO3\",\"SEFO3\",\"SETO3\",\"SRAW1\",\"SRFW1\",\"TANO3\",\"ANMF1\",\"ARPF1\",\"BGCF1\",\"CAMF1\",\"CLBF1\",\"EGKF1\",\"NFBF1\",\"PTRF1\",\"SHPF1\",\"MBIN7\",\"MBNN7\",\"OCPN7\",\"BSCA1\",\"CRTA1\",\"DPHA1\",\"KATA1\",\"MBLA1\",\"MHPA1\",\"SACV4\",\"BBSF1\",\"BDVF1\",\"BKYF1\",\"BNKF1\",\"BOBF1\",\"BSKF1\",\"CNBF1\",\"CWAF1\",\"DKKF1\",\"GBIF1\",\"GBTF1\",\"GKYF1\",\"JBYF1\",\"JKYF1\",\"LBRF1\",\"LBSF1\",\"LMDF1\",\"LMRF1\",\"LSNF1\",\"MDKF1\",\"MNBF1\",\"MUKF1\",\"NRRF1\",\"PKYF1\",\"TCVF1\",\"THRF1\",\"TPEF1\",\"TRRF1\",\"WIWF1\",\"WPLF1\",\"APNM4\",\"CHII2\",\"MCYI3\",\"SRLM4\",\"SVNM4\",\"TBIM4\",\"THLO1\",\"LCIY2\",\"LLBP7\",\"FWIC3\",\"MISC3\",\"MISN6\",\"NCSC3\",\"NOSC3\",\"OFPN6\",\"ILDL1\",\"MRSL1\",\"SIPM6\",\"SLPL1\",\"LUML1\",\"TAML1\",\"AKXA2\",\"APMA2\",\"BEXA2\",\"CDXA2\",\"CPXA2\",\"DHXA2\",\"DPXA2\",\"ERXA2\",\"GBXA2\",\"GEXA2\",\"GIXA2\",\"GPXA2\",\"HMSA2\",\"ICYA2\",\"JLXA2\",\"JMLA2\",\"JNGA2\",\"KEXA2\",\"KNXA2\",\"KOZA2\",\"LIXA2\",\"MIXA2\",\"MRNA2\",\"MRYA2\",\"NKLA2\",\"NKXA2\",\"NLXA2\",\"NMXA2\",\"NSXA2\",\"PAUA2\",\"PEXA2\",\"PGXA2\",\"PPXA2\",\"PTLA2\",\"RIXA2\",\"SCXA2\",\"SIXA2\",\"SKXA2\",\"SLXA2\",\"SPXA2\",\"SRXA2\",\"STXA2\",\"SXXA2\",\"TKEA2\",\"TPXA2\",\"UQXA2\",\"VDXA2\",\"WCXA2\",\"MSG10\",\"MSG12\",\"ACQS1\",\"ACXS1\",\"ANMN6\",\"ANRN6\",\"APQF1\",\"APXA2\",\"BILW3\",\"BRIM2\",\"BSLM2\",\"BVQW1\",\"CHNO3\",\"CHQO3\",\"CWQT2\",\"DBQS1\",\"DEQD1\",\"DRSD1\",\"EAZC1\",\"EHSC1\",\"EVMC1\",\"FFFC1\",\"GBHM6\",\"GBQN3\",\"GBRM6\",\"GDQM6\",\"GGGC1\",\"GTQF1\",\"GTXF1\",\"HBMN6\",\"HMRA2\",\"HUQN6\",\"JCTN4\",\"JOBP4\",\"JOQP4\",\"JOXP4\",\"KCHA2\",\"LTQM2\",\"MIST2\",\"MQMT2\",\"MWQT2\",\"NAQR1\",\"NAXR1\",\"NIQS1\",\"NOXN7\",\"NPQN6\",\"NPXN6\",\"OWDO1\",\"OWQO1\",\"OWSO1\",\"PBLW1\",\"PKBW3\",\"RKQF1\",\"RKXF1\",\"RYEC1\",\"SAQG1\",\"SCQC1\",\"SCQN6\",\"SEQA2\",\"SFXC1\",\"SKQN6\",\"SLOO3\",\"TCSV2\",\"TIQC1\",\"TIXC1\",\"TKPN6\",\"WAQM3\",\"WAXM3\",\"WELM1\",\"WEQM1\",\"WEXM1\",\"WKQA1\",\"WKXA1\",\"WYBS1\",\"NLMA3\",\"SBBN2\",\"SLMN2\",\"BAXC1\",\"BDRN4\",\"BDSP1\",\"BGNN6\",\"BKBF1\",\"BLIF1\",\"BRND1\",\"CHCM2\",\"CHYV2\",\"COVM2\",\"CPMW1\",\"CPNW1\",\"CRYV2\",\"DELD1\",\"DMSF1\",\"DOMV2\",\"DPXC1\",\"EBEF1\",\"FMOA1\",\"FRVM3\",\"FRXM3\",\"FSKM2\",\"FSNM2\",\"GCTF1\",\"LNDC1\",\"LQAT2\",\"LTJF1\",\"MBPA1\",\"MCGA1\",\"MHBT2\",\"MRCP1\",\"MTBF1\",\"MZXC1\",\"NBLP1\",\"NFDF1\",\"NWHC3\",\"OMHC1\",\"OPTF1\",\"PDVR1\",\"PEGF1\",\"PFDC1\",\"PFXC1\",\"PPTM2\",\"PPXC1\",\"PRJC1\",\"PRUR1\",\"PSBC1\",\"PSXC1\",\"PTOA1\",\"PVDR1\",\"PXAC1\",\"PXOC1\",\"PXSC1\",\"QPTR1\",\"RPLV2\",\"RTYC1\",\"SEIM1\",\"SJSN4\",\"SKCF1\",\"SWPM4\",\"TCNW1\",\"TLVT2\",\"TPAF1\",\"TSHF1\",\"TXVT2\",\"UPBC1\",\"WDSV2\",\"ACYN4\",\"ADKA2\",\"AGCM4\",\"ALIA2\",\"ALXN6\",\"AMRL1\",\"APAM2\",\"APCF1\",\"APRP7\",\"ASTO3\",\"ATGM1\",\"ATKA2\",\"BEPB6\",\"BFTN7\",\"BHBM3\",\"BISM2\",\"BKTL1\",\"BLTM2\",\"BYGL1\",\"BZBM3\",\"CAMM2\",\"CAPL1\",\"CARL1\",\"CASM1\",\"CECC1\",\"CFWM1\",\"CHAO3\",\"CHAV3\",\"CHBV2\",\"CHSV3\",\"CHYW1\",\"CLBP4\",\"CMAN4\",\"CMTI2\",\"CNDO1\",\"CRVA2\",\"DILA1\",\"DKCM6\",\"DTLM4\",\"DUKN7\",\"DULM5\",\"EBSW1\",\"ERTF1\",\"ESPP4\",\"FAIO1\",\"FCGT2\",\"FMRF1\",\"FOXR1\",\"FPTT2\",\"FRCB6\",\"FRDF1\",\"FRDW1\",\"FREL1\",\"FRPS1\",\"FTPC1\",\"GBWW3\",\"GCVF1\",\"GDMM5\",\"GISL1\",\"GNJT2\",\"GTOT2\",\"GWPM6\",\"HBYC1\",\"HCGN7\",\"HLNM4\",\"HMDO3\",\"ICAC1\",\"IIWC1\",\"ILOH1\",\"ITKA2\",\"JMPN7\",\"JNEA2\",\"KECA2\",\"KGCA2\",\"KLIH1\",\"KPTN6\",\"KPTV2\",\"KWHH1\",\"KYWF1\",\"LABL1\",\"LAMV3\",\"LAPW1\",\"LCLL1\",\"LDTM4\",\"LOPW1\",\"LPNM4\",\"LTBV3\",\"LTRM4\",\"LWSD1\",\"LWTV2\",\"MBRM4\",\"MCGM4\",\"MCYF1\",\"MEYC1\",\"MGIP4\",\"MGZP4\",\"MOKH1\",\"MQTT2\",\"MRHO1\",\"MROS1\",\"MTKN6\",\"MTYC1\",\"NEAW1\",\"NIAN6\",\"NJLC1\",\"NKTA2\",\"NLNC3\",\"NMTA2\",\"NTBC1\",\"NTKM3\",\"NUET2\",\"NWCL1\",\"NWPR1\",\"NWWH1\",\"OCIM2\",\"OHBC1\",\"OLSA2\",\"OOUH1\",\"ORIN7\",\"OSGN6\",\"PCBF1\",\"PCLF1\",\"PCOC1\",\"PGBP7\",\"PHBP1\",\"PLXA2\",\"PNLM6\",\"PORO3\",\"PRDA2\",\"PRYC1\",\"PSBM1\",\"PSLC1\",\"PTAW1\",\"PTIM4\",\"PTIT2\",\"PTWW1\",\"RARM6\",\"RCKM4\",\"RCYF1\",\"RDDA2\",\"RDYD1\",\"SAPF1\",\"SBEO3\",\"SBLF1\",\"SDBC1\",\"SDHN4\",\"SHBL1\",\"SJNP4\",\"SKTA2\",\"SLIM2\",\"SNDP5\",\"SWLA2\",\"SWPV2\",\"TESL1\",\"THRO1\",\"TLBO3\",\"TRDF1\",\"TXPT2\",\"ULAM6\",\"ULRA2\",\"UNLA2\",\"VAKF1\",\"VDZA2\",\"WAHV2\",\"WAKP8\",\"WASD2\",\"WAVM6\",\"WLON7\",\"WPTW1\",\"WYCM6\",\"YATA2\",\"BLTA2\",\"CDEA2\",\"EROA2\",\"LCNA2\",\"PBPA2\",\"PRTA2\",\"SDIA2\",\"AGMW3\",\"BHRI3\",\"BIGM4\",\"BSBM4\",\"CBRW3\",\"CLSM4\",\"FPTM4\",\"GBLW3\",\"GRMM4\",\"GSLM4\",\"GTLM4\",\"GTRM4\",\"KP53\",\"KP58\",\"KP59\",\"LSCM4\",\"MEEM4\",\"NABM4\",\"PCLM4\",\"PNGW3\",\"PRIM4\",\"PSCM4\",\"PWAW3\",\"SBLM4\",\"SPTM4\",\"SXHW3\",\"SYWW3\",\"TAWM4\",\"WFPM4\",\"BARN6\",\"CBLO1\",\"CHDS1\",\"CMPO1\",\"GELO1\",\"HHLO1\",\"LORO1\",\"NREP1\",\"OLCN6\",\"RPRN6\",\"WATS1\",\"AUDP4\",\"FRDP4\",\"PLSP4\",\"VQSP4\",\"CGCL1\",\"SKMG1\",\"SPAG1\",\"AVAN4\",\"BRBN4\",\"OCGN4\",\"AWRT2\",\"BABT2\",\"BZST2\",\"CLLT2\",\"CPNT2\",\"EMAT2\",\"GRRT2\",\"HIST2\",\"IRDT2\",\"LUIT2\",\"LYBT2\",\"MGPT2\",\"NWST2\",\"PACT2\",\"PCGT2\",\"PCNT2\",\"PMNT2\",\"PORT2\",\"RSJT2\",\"RTAT2\",\"RTOT2\",\"SDRT2\",\"SGNT2\",\"TAQT2\",\"BTHD1\",\"FRFN7\",\"JPRN7\",\"18CI3\",\"20CM4\",\"GDIV2\",\"32ST0\",\"41NT0\"]\nbuoy_ids = ids\nbuoy_ids_with_cameras = [] # blank list to store buoy ids with cameras",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "ids",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "ids = [\"21414\",\"21415\",\"21416\",\"21417\",\"21418\",\"21419\",\"32301\",\"32302\",\"32411\",\"32412\",\"32413\",\"41001\",\"41002\",\"41003\",\"41004\",\"41007\",\"41008\",\"41009\",\"41010\",\"41011\",\"41012\",\"41016\",\"41017\",\"41018\",\"41021\",\"41022\",\"41023\",\"41036\",\"41040\",\"41041\",\"41043\",\"41044\",\"41046\",\"41049\",\"41420\",\"41421\",\"41424\",\"41425\",\"42001\",\"42002\",\"42003\",\"42004\",\"42007\",\"42008\",\"42009\",\"42010\",\"42011\",\"42012\",\"42017\",\"42018\",\"42019\",\"42020\",\"42025\",\"42035\",\"42038\",\"42039\",\"42040\",\"42041\",\"42042\",\"42053\",\"42056\",\"42057\",\"42058\",\"42059\",\"42060\",\"42065\",\"42408\",\"42409\",\"42429\",\"42501\",\"42503\",\"42534\",\"44001\",\"44003\",\"44004\",\"44005\",\"44006\",\"44007\",\"44010\",\"44011\",\"44012\",\"44013\",\"44014\",\"44015\",\"44019\",\"44020\",\"44023\",\"44025\",\"44026\",\"44027\",\"44066\",\"44070\",\"44071\",\"44401\",\"44402\",\"44403\",\"45002\",\"45003\",\"45004\",\"45005\",\"45006\",\"45007\",\"45010\",\"45011\",\"45012\",\"46001\",\"46002\",\"46003\",\"46007\",\"46008\",\"46009\",\"46010\",\"46011\",\"46012\",\"46015\",\"46016\",\"46017\",\"46018\",\"46019\",\"46020\",\"46023\",\"46024\",\"46025\",\"46026\",\"46027\",\"46028\",\"46031\",\"46032\",\"46033\",\"46034\",\"46035\",\"46037\",\"46040\",\"46041\",\"46042\",\"46043\",\"46045\",\"46047\",\"46051\",\"46053\",\"46054\",\"46059\",\"46060\",\"46061\",\"46066\",\"46069\",\"46070\",\"46071\",\"46072\",\"46073\",\"46077\",\"46078\",\"46079\",\"46080\",\"46081\",\"46082\",\"46085\",\"46086\",\"46087\",\"46088\",\"46089\",\"46090\",\"46107\",\"46115\",\"46270\",\"46290\",\"46401\",\"46402\",\"46405\",\"46406\",\"46407\",\"46408\",\"46409\",\"46410\",\"46413\",\"46414\",\"46415\",\"46416\",\"46419\",\"46490\",\"46779\",\"46780\",\"46781\",\"46782\",\"46785\",\"51000\",\"51001\",\"51002\",\"51003\",\"51004\",\"51005\",\"51028\",\"51100\",\"51101\",\"51406\",\"51407\",\"51425\",\"52009\",\"52401\",\"52402\",\"52403\",\"52404\",\"52405\",\"91204\",\"91222\",\"91251\",\"91328\",\"91338\",\"91343\",\"91356\",\"91365\",\"91374\",\"91377\",\"91411\",\"91442\",\"46265\",\"41670\",\"41852\",\"41904\",\"41933\",\"48916\",\"48917\",\"52838\",\"52839\",\"52840\",\"52841\",\"52842\",\"52843\",\"52862\",\"55012\",\"55013\",\"55015\",\"55016\",\"55023\",\"55042\",\"58952\",\"31052\",\"31053\",\"41052\",\"41053\",\"41056\",\"41058\",\"41115\",\"41121\",\"41030\",\"44042\",\"44043\",\"44057\",\"44058\",\"44059\",\"44061\",\"44064\",\"44068\",\"45016\",\"45017\",\"45018\",\"45019\",\"45177\",\"45202\",\"45203\",\"45204\",\"45205\",\"45206\",\"45207\",\"46116\",\"46117\",\"46127\",\"42014\",\"42021\",\"42022\",\"42023\",\"42024\",\"42026\",\"32404\",\"41029\",\"41033\",\"41037\",\"41038\",\"41064\",\"41065\",\"41110\",\"41119\",\"41159\",\"32488\",\"41193\",\"44138\",\"44139\",\"44140\",\"44141\",\"44142\",\"44150\",\"44176\",\"44235\",\"44251\",\"44255\",\"44258\",\"44488\",\"45132\",\"45135\",\"45136\",\"45137\",\"45138\",\"45139\",\"45142\",\"45143\",\"45144\",\"45145\",\"45147\",\"45148\",\"45151\",\"45152\",\"45154\",\"45155\",\"45158\",\"45159\",\"46036\",\"46131\",\"46132\",\"46084\",\"46134\",\"46138\",\"46139\",\"46147\",\"46181\",\"46183\",\"46184\",\"46185\",\"46204\",\"46207\",\"46208\",\"46303\",\"46304\",\"48021\",\"45162\",\"45163\",\"45195\",\"23219\",\"23227\",\"32067\",\"32068\",\"42087\",\"42088\",\"42089\",\"42090\",\"46109\",\"46110\",\"46111\",\"46112\",\"21346\",\"21347\",\"21348\",\"21595\",\"21597\",\"21598\",\"21637\",\"21640\",\"22102\",\"22103\",\"22104\",\"22105\",\"22106\",\"22107\",\"45029\",\"45164\",\"45165\",\"45168\",\"45169\",\"45176\",\"46091\",\"46092\",\"62091\",\"62092\",\"62093\",\"62094\",\"41097\",\"41098\",\"41100\",\"41101\",\"41300\",\"61001\",\"45025\",\"45175\",\"44039\",\"44040\",\"44060\",\"23220\",\"23223\",\"23225\",\"46261\",\"46263\",\"48901\",\"48908\",\"48909\",\"48912\",\"44024\",\"44029\",\"44030\",\"44031\",\"44032\",\"44033\",\"44036\",\"44037\",\"45172\",\"45173\",\"46118\",\"46119\",\"46531\",\"46534\",\"46538\",\"46565\",\"44075\",\"44076\",\"44077\",\"44078\",\"46097\",\"46098\",\"51046\",\"51201\",\"51202\",\"51203\",\"51204\",\"51205\",\"51208\",\"51209\",\"51210\",\"51211\",\"51212\",\"51213\",\"52202\",\"52211\",\"13002\",\"13008\",\"13009\",\"13010\",\"15001\",\"15002\",\"31001\",\"31002\",\"31003\",\"31004\",\"31005\",\"31006\",\"62121\",\"62124\",\"62125\",\"62126\",\"62127\",\"62130\",\"62144\",\"62145\",\"62146\",\"62147\",\"62148\",\"62149\",\"62165\",\"62166\",\"63105\",\"63110\",\"63112\",\"63113\",\"14041\",\"14043\",\"14047\",\"23001\",\"23003\",\"23004\",\"23008\",\"23009\",\"23010\",\"23011\",\"23012\",\"23013\",\"23016\",\"23017\",\"53005\",\"53006\",\"53009\",\"53040\",\"56053\",\"01506\",\"01507\",\"01518\",\"01537\",\"48904\",\"48907\",\"01521\",\"01522\",\"01523\",\"01524\",\"01526\",\"01531\",\"01535\",\"01536\",\"01538\",\"01909\",\"01910\",\"31201\",\"41112\",\"41113\",\"41114\",\"41116\",\"41118\",\"41120\",\"42084\",\"42091\",\"42094\",\"42099\",\"44088\",\"44094\",\"44099\",\"44100\",\"44172\",\"46114\",\"46211\",\"46212\",\"46215\",\"46216\",\"46217\",\"46218\",\"46219\",\"46220\",\"46223\",\"46224\",\"46225\",\"46226\",\"46227\",\"46228\",\"46231\",\"46232\",\"46234\",\"46235\",\"46236\",\"46237\",\"46240\",\"46241\",\"46242\",\"46243\",\"46244\",\"46245\",\"46249\",\"46250\",\"46251\",\"46253\",\"46254\",\"46256\",\"46262\",\"46267\",\"46268\",\"46269\",\"46273\",\"46274\",\"51200\",\"48212\",\"48213\",\"48214\",\"48677\",\"48678\",\"48679\",\"48680\",\"48911\",\"42044\",\"42045\",\"42046\",\"42047\",\"42048\",\"42049\",\"42078\",\"42079\",\"42093\",\"42095\",\"42097\",\"44056\",\"45180\",\"46259\",\"46266\",\"62028\",\"62029\",\"62030\",\"62050\",\"62081\",\"62103\",\"62108\",\"62163\",\"62170\",\"62298\",\"62301\",\"62303\",\"62442\",\"64045\",\"44098\",\"46121\",\"46122\",\"46123\",\"46124\",\"28902\",\"28903\",\"28904\",\"28906\",\"28907\",\"28908\",\"58900\",\"58902\",\"58903\",\"58904\",\"58905\",\"58906\",\"58909\",\"68900\",\"78900\",\"45014\",\"45184\",\"44053\",\"01517\",\"32012\",\"41060\",\"41061\",\"21D20\",\"32D12\",\"32D13\",\"41A46\",\"41S43\",\"41S46\",\"46B35\",\"ALSN6\",\"AMAA2\",\"AUGA2\",\"BLIA2\",\"BURL1\",\"BUSL1\",\"CDRF1\",\"CHLV2\",\"CLKN7\",\"CSBF1\",\"DBLN6\",\"DESW1\",\"DRFA2\",\"DRYF1\",\"DSLN7\",\"DUCN7\",\"EB01\",\"EB10\",\"EB33\",\"EB35\",\"EB36\",\"EB43\",\"EB52\",\"EB53\",\"EB70\",\"EB90\",\"EB91\",\"EB92\",\"FARP2\",\"FBIS1\",\"FPSN7\",\"FWYF1\",\"GBCL1\",\"GDIL1\",\"GLLN6\",\"IOSN3\",\"LONF1\",\"LPOI1\",\"MDRM1\",\"MISM1\",\"MLRF1\",\"MPCL1\",\"PILA2\",\"PILM4\",\"PLSF1\",\"POTA2\",\"PTAC1\",\"PTAT2\",\"SANF1\",\"SAUF1\",\"SBIO1\",\"SGNW3\",\"SGOF1\",\"SISW1\",\"SPGF1\",\"SRST2\",\"STDM4\",\"SUPN6\",\"SVLS1\",\"THIN6\",\"VENF1\",\"HBXC1\",\"MYXC1\",\"TDPC1\",\"FSTI2\",\"DMNO3\",\"GPTW1\",\"HMNO3\",\"PRTO3\",\"SEFO3\",\"SETO3\",\"SRAW1\",\"SRFW1\",\"TANO3\",\"ANMF1\",\"ARPF1\",\"BGCF1\",\"CAMF1\",\"CLBF1\",\"EGKF1\",\"NFBF1\",\"PTRF1\",\"SHPF1\",\"MBIN7\",\"MBNN7\",\"OCPN7\",\"BSCA1\",\"CRTA1\",\"DPHA1\",\"KATA1\",\"MBLA1\",\"MHPA1\",\"SACV4\",\"BBSF1\",\"BDVF1\",\"BKYF1\",\"BNKF1\",\"BOBF1\",\"BSKF1\",\"CNBF1\",\"CWAF1\",\"DKKF1\",\"GBIF1\",\"GBTF1\",\"GKYF1\",\"JBYF1\",\"JKYF1\",\"LBRF1\",\"LBSF1\",\"LMDF1\",\"LMRF1\",\"LSNF1\",\"MDKF1\",\"MNBF1\",\"MUKF1\",\"NRRF1\",\"PKYF1\",\"TCVF1\",\"THRF1\",\"TPEF1\",\"TRRF1\",\"WIWF1\",\"WPLF1\",\"APNM4\",\"CHII2\",\"MCYI3\",\"SRLM4\",\"SVNM4\",\"TBIM4\",\"THLO1\",\"LCIY2\",\"LLBP7\",\"FWIC3\",\"MISC3\",\"MISN6\",\"NCSC3\",\"NOSC3\",\"OFPN6\",\"ILDL1\",\"MRSL1\",\"SIPM6\",\"SLPL1\",\"LUML1\",\"TAML1\",\"AKXA2\",\"APMA2\",\"BEXA2\",\"CDXA2\",\"CPXA2\",\"DHXA2\",\"DPXA2\",\"ERXA2\",\"GBXA2\",\"GEXA2\",\"GIXA2\",\"GPXA2\",\"HMSA2\",\"ICYA2\",\"JLXA2\",\"JMLA2\",\"JNGA2\",\"KEXA2\",\"KNXA2\",\"KOZA2\",\"LIXA2\",\"MIXA2\",\"MRNA2\",\"MRYA2\",\"NKLA2\",\"NKXA2\",\"NLXA2\",\"NMXA2\",\"NSXA2\",\"PAUA2\",\"PEXA2\",\"PGXA2\",\"PPXA2\",\"PTLA2\",\"RIXA2\",\"SCXA2\",\"SIXA2\",\"SKXA2\",\"SLXA2\",\"SPXA2\",\"SRXA2\",\"STXA2\",\"SXXA2\",\"TKEA2\",\"TPXA2\",\"UQXA2\",\"VDXA2\",\"WCXA2\",\"MSG10\",\"MSG12\",\"ACQS1\",\"ACXS1\",\"ANMN6\",\"ANRN6\",\"APQF1\",\"APXA2\",\"BILW3\",\"BRIM2\",\"BSLM2\",\"BVQW1\",\"CHNO3\",\"CHQO3\",\"CWQT2\",\"DBQS1\",\"DEQD1\",\"DRSD1\",\"EAZC1\",\"EHSC1\",\"EVMC1\",\"FFFC1\",\"GBHM6\",\"GBQN3\",\"GBRM6\",\"GDQM6\",\"GGGC1\",\"GTQF1\",\"GTXF1\",\"HBMN6\",\"HMRA2\",\"HUQN6\",\"JCTN4\",\"JOBP4\",\"JOQP4\",\"JOXP4\",\"KCHA2\",\"LTQM2\",\"MIST2\",\"MQMT2\",\"MWQT2\",\"NAQR1\",\"NAXR1\",\"NIQS1\",\"NOXN7\",\"NPQN6\",\"NPXN6\",\"OWDO1\",\"OWQO1\",\"OWSO1\",\"PBLW1\",\"PKBW3\",\"RKQF1\",\"RKXF1\",\"RYEC1\",\"SAQG1\",\"SCQC1\",\"SCQN6\",\"SEQA2\",\"SFXC1\",\"SKQN6\",\"SLOO3\",\"TCSV2\",\"TIQC1\",\"TIXC1\",\"TKPN6\",\"WAQM3\",\"WAXM3\",\"WELM1\",\"WEQM1\",\"WEXM1\",\"WKQA1\",\"WKXA1\",\"WYBS1\",\"NLMA3\",\"SBBN2\",\"SLMN2\",\"BAXC1\",\"BDRN4\",\"BDSP1\",\"BGNN6\",\"BKBF1\",\"BLIF1\",\"BRND1\",\"CHCM2\",\"CHYV2\",\"COVM2\",\"CPMW1\",\"CPNW1\",\"CRYV2\",\"DELD1\",\"DMSF1\",\"DOMV2\",\"DPXC1\",\"EBEF1\",\"FMOA1\",\"FRVM3\",\"FRXM3\",\"FSKM2\",\"FSNM2\",\"GCTF1\",\"LNDC1\",\"LQAT2\",\"LTJF1\",\"MBPA1\",\"MCGA1\",\"MHBT2\",\"MRCP1\",\"MTBF1\",\"MZXC1\",\"NBLP1\",\"NFDF1\",\"NWHC3\",\"OMHC1\",\"OPTF1\",\"PDVR1\",\"PEGF1\",\"PFDC1\",\"PFXC1\",\"PPTM2\",\"PPXC1\",\"PRJC1\",\"PRUR1\",\"PSBC1\",\"PSXC1\",\"PTOA1\",\"PVDR1\",\"PXAC1\",\"PXOC1\",\"PXSC1\",\"QPTR1\",\"RPLV2\",\"RTYC1\",\"SEIM1\",\"SJSN4\",\"SKCF1\",\"SWPM4\",\"TCNW1\",\"TLVT2\",\"TPAF1\",\"TSHF1\",\"TXVT2\",\"UPBC1\",\"WDSV2\",\"ACYN4\",\"ADKA2\",\"AGCM4\",\"ALIA2\",\"ALXN6\",\"AMRL1\",\"APAM2\",\"APCF1\",\"APRP7\",\"ASTO3\",\"ATGM1\",\"ATKA2\",\"BEPB6\",\"BFTN7\",\"BHBM3\",\"BISM2\",\"BKTL1\",\"BLTM2\",\"BYGL1\",\"BZBM3\",\"CAMM2\",\"CAPL1\",\"CARL1\",\"CASM1\",\"CECC1\",\"CFWM1\",\"CHAO3\",\"CHAV3\",\"CHBV2\",\"CHSV3\",\"CHYW1\",\"CLBP4\",\"CMAN4\",\"CMTI2\",\"CNDO1\",\"CRVA2\",\"DILA1\",\"DKCM6\",\"DTLM4\",\"DUKN7\",\"DULM5\",\"EBSW1\",\"ERTF1\",\"ESPP4\",\"FAIO1\",\"FCGT2\",\"FMRF1\",\"FOXR1\",\"FPTT2\",\"FRCB6\",\"FRDF1\",\"FRDW1\",\"FREL1\",\"FRPS1\",\"FTPC1\",\"GBWW3\",\"GCVF1\",\"GDMM5\",\"GISL1\",\"GNJT2\",\"GTOT2\",\"GWPM6\",\"HBYC1\",\"HCGN7\",\"HLNM4\",\"HMDO3\",\"ICAC1\",\"IIWC1\",\"ILOH1\",\"ITKA2\",\"JMPN7\",\"JNEA2\",\"KECA2\",\"KGCA2\",\"KLIH1\",\"KPTN6\",\"KPTV2\",\"KWHH1\",\"KYWF1\",\"LABL1\",\"LAMV3\",\"LAPW1\",\"LCLL1\",\"LDTM4\",\"LOPW1\",\"LPNM4\",\"LTBV3\",\"LTRM4\",\"LWSD1\",\"LWTV2\",\"MBRM4\",\"MCGM4\",\"MCYF1\",\"MEYC1\",\"MGIP4\",\"MGZP4\",\"MOKH1\",\"MQTT2\",\"MRHO1\",\"MROS1\",\"MTKN6\",\"MTYC1\",\"NEAW1\",\"NIAN6\",\"NJLC1\",\"NKTA2\",\"NLNC3\",\"NMTA2\",\"NTBC1\",\"NTKM3\",\"NUET2\",\"NWCL1\",\"NWPR1\",\"NWWH1\",\"OCIM2\",\"OHBC1\",\"OLSA2\",\"OOUH1\",\"ORIN7\",\"OSGN6\",\"PCBF1\",\"PCLF1\",\"PCOC1\",\"PGBP7\",\"PHBP1\",\"PLXA2\",\"PNLM6\",\"PORO3\",\"PRDA2\",\"PRYC1\",\"PSBM1\",\"PSLC1\",\"PTAW1\",\"PTIM4\",\"PTIT2\",\"PTWW1\",\"RARM6\",\"RCKM4\",\"RCYF1\",\"RDDA2\",\"RDYD1\",\"SAPF1\",\"SBEO3\",\"SBLF1\",\"SDBC1\",\"SDHN4\",\"SHBL1\",\"SJNP4\",\"SKTA2\",\"SLIM2\",\"SNDP5\",\"SWLA2\",\"SWPV2\",\"TESL1\",\"THRO1\",\"TLBO3\",\"TRDF1\",\"TXPT2\",\"ULAM6\",\"ULRA2\",\"UNLA2\",\"VAKF1\",\"VDZA2\",\"WAHV2\",\"WAKP8\",\"WASD2\",\"WAVM6\",\"WLON7\",\"WPTW1\",\"WYCM6\",\"YATA2\",\"BLTA2\",\"CDEA2\",\"EROA2\",\"LCNA2\",\"PBPA2\",\"PRTA2\",\"SDIA2\",\"AGMW3\",\"BHRI3\",\"BIGM4\",\"BSBM4\",\"CBRW3\",\"CLSM4\",\"FPTM4\",\"GBLW3\",\"GRMM4\",\"GSLM4\",\"GTLM4\",\"GTRM4\",\"KP53\",\"KP58\",\"KP59\",\"LSCM4\",\"MEEM4\",\"NABM4\",\"PCLM4\",\"PNGW3\",\"PRIM4\",\"PSCM4\",\"PWAW3\",\"SBLM4\",\"SPTM4\",\"SXHW3\",\"SYWW3\",\"TAWM4\",\"WFPM4\",\"BARN6\",\"CBLO1\",\"CHDS1\",\"CMPO1\",\"GELO1\",\"HHLO1\",\"LORO1\",\"NREP1\",\"OLCN6\",\"RPRN6\",\"WATS1\",\"AUDP4\",\"FRDP4\",\"PLSP4\",\"VQSP4\",\"CGCL1\",\"SKMG1\",\"SPAG1\",\"AVAN4\",\"BRBN4\",\"OCGN4\",\"AWRT2\",\"BABT2\",\"BZST2\",\"CLLT2\",\"CPNT2\",\"EMAT2\",\"GRRT2\",\"HIST2\",\"IRDT2\",\"LUIT2\",\"LYBT2\",\"MGPT2\",\"NWST2\",\"PACT2\",\"PCGT2\",\"PCNT2\",\"PMNT2\",\"PORT2\",\"RSJT2\",\"RTAT2\",\"RTOT2\",\"SDRT2\",\"SGNT2\",\"TAQT2\",\"BTHD1\",\"FRFN7\",\"JPRN7\",\"18CI3\",\"20CM4\",\"GDIV2\",\"32ST0\",\"41NT0\"]\nbuoy_ids = ids\nbuoy_ids_with_cameras = [] # blank list to store buoy ids with cameras\n# %%\n# Loop through the buoy ids\nfor buoy_id in tqdm(buoy_ids):\n    # if the page text needs to be retrieved then do so, else pull from the text files\n    if not os.path.exists('data/buoy_pages/{}.txt'.format(buoy_id)):\n        # get the page text\n        time.sleep(1)",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "buoy_ids",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "buoy_ids = ids\nbuoy_ids_with_cameras = [] # blank list to store buoy ids with cameras\n# %%\n# Loop through the buoy ids\nfor buoy_id in tqdm(buoy_ids):\n    # if the page text needs to be retrieved then do so, else pull from the text files\n    if not os.path.exists('data/buoy_pages/{}.txt'.format(buoy_id)):\n        # get the page text\n        time.sleep(1)\n        page = requests.get('https://www.ndbc.noaa.gov/station_page.php?station={}'.format(buoy_id))",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "buoy_ids_with_cameras",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "buoy_ids_with_cameras = [] # blank list to store buoy ids with cameras\n# %%\n# Loop through the buoy ids\nfor buoy_id in tqdm(buoy_ids):\n    # if the page text needs to be retrieved then do so, else pull from the text files\n    if not os.path.exists('data/buoy_pages/{}.txt'.format(buoy_id)):\n        # get the page text\n        time.sleep(1)\n        page = requests.get('https://www.ndbc.noaa.gov/station_page.php?station={}'.format(buoy_id))\n        # write the page text to a file",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "cam_buoys",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "cam_buoys = [] # blank list to store buoy ids with cameras\n# %%\n# Purpose: parse the page text to get the camera urls and save them to a file. The page is parsed using BeautifulSoup and the camera urls are extracted using regular expressions.\n# only do this once to get the camera urls and save them to a file for later use\n# if the file does not exist then do so, else pull from the file\nif not os.path.exists('data/buoy_ids_with_cameras.txt'):\n    # open each buoy page text file in data/buoy_pages and parse the page text\n    for buoy_page in tqdm(os.listdir('data/buoy_pages')):\n        with open('data/buoy_pages/{}'.format(buoy_page), 'r') as f:\n            page = f.read() # read the page text",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "cam_urls",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "cam_urls = [] # blank list to store the camera urls\nfor buoy_id in tqdm(cam_buoys):\n    cam_url = 'https://www.ndbc.noaa.gov/buoycam.php?station={}'.format(buoy_id)\n    cam_urls.append(cam_url) # add the camera url to the list of camera urls\n# save the camera urls to the file data/camera_urls.csv\nwith open('data/camera_urls.csv', 'w+') as f:\n    f.write(\"'cam_url',\\n\")\n    for cam_url in cam_urls: # loop through the camera urls\n        f.write('{},\\n'.format(cam_url)) # write the camera url to the file\nprint('These have been saved in the cam_urls array.')",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "buoy_update_rates_dict",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "buoy_update_rates_dict = {} # blank dictionary to store the update rates for each buoy (i.e. how often the buoy takes a picture (measured in seconds))\n# fill the dictionary with blank update rate arrays for each buoy.\n# these arrays will be averaged to get the average update rate for each buoy in real time.\nfor buoy_id in cam_buoys:\n    buoy_update_rates_dict[buoy_id] = 1 # set the initial update rate to 600 seconds (10 minutes)\n# %%\ndef image_has_changed(image_one,image_two):\n    # looks for changes between two images and returns True if there are changes and False if there are not.\n    # this function is used to determine what rate the images are being updated for each buoy.\n    # if the images are not changing, then the buoy is not updating the images.",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "buoy_update_rates_dict",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "buoy_update_rates_dict = {'46025': [600, datetime.datetime.now()]}\nprint(check_for_updates(buoy_update_rates_dict)) # should return an empty list\n# wait 10 seconds\ntime.sleep(10)\nprint(check_for_updates(buoy_update_rates_dict)) # should return ['46025']\n# %%\n# import shutil\n# from difPy import dif\n# go through each buoy and check if there are duplicated images in the images/buoys folder\nfor folder in os.listdir('images/buoys'):",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "iteration_counter",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "iteration_counter = 0\nvincent = Artist() # create an instance of the Artist class\n# %%\nprint('Starting the download loop')\nlast_time_fetched = time.time() # get the current time\nfirst_run = True # set a flag to indicate that this is the first run of the loop (for the first run, we will download rss feeds for all the buoys)\nwhile True:\n    try:\n        # turn on at 4 am CST and turn off at 11 pm CST\n        if datetime.datetime.now().hour < 4 or datetime.datetime.now().hour > 22: # if it is before 4 am or after 11 pm",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "vincent",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "vincent = Artist() # create an instance of the Artist class\n# %%\nprint('Starting the download loop')\nlast_time_fetched = time.time() # get the current time\nfirst_run = True # set a flag to indicate that this is the first run of the loop (for the first run, we will download rss feeds for all the buoys)\nwhile True:\n    try:\n        # turn on at 4 am CST and turn off at 11 pm CST\n        if datetime.datetime.now().hour < 4 or datetime.datetime.now().hour > 22: # if it is before 4 am or after 11 pm\n            # wait to turn on until 4 am CST",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "last_time_fetched",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "last_time_fetched = time.time() # get the current time\nfirst_run = True # set a flag to indicate that this is the first run of the loop (for the first run, we will download rss feeds for all the buoys)\nwhile True:\n    try:\n        # turn on at 4 am CST and turn off at 11 pm CST\n        if datetime.datetime.now().hour < 4 or datetime.datetime.now().hour > 22: # if it is before 4 am or after 11 pm\n            # wait to turn on until 4 am CST\n            # keep the computer awake\n            print('The computer is sleeping')\n            time.sleep(240) # sleep for 4 minutes",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "first_run",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "first_run = True # set a flag to indicate that this is the first run of the loop (for the first run, we will download rss feeds for all the buoys)\nwhile True:\n    try:\n        # turn on at 4 am CST and turn off at 11 pm CST\n        if datetime.datetime.now().hour < 4 or datetime.datetime.now().hour > 22: # if it is before 4 am or after 11 pm\n            # wait to turn on until 4 am CST\n            # keep the computer awake\n            print('The computer is sleeping')\n            time.sleep(240) # sleep for 4 minutes\n            continue",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "cam_finder_raw",
        "description": "cam_finder_raw",
        "peekOfCode": "path = 'images/panels/46066/2022_11_5_15_45/2022_11_5_15_45_panel_1.png'\nprint(is_it_daytime(path))",
        "detail": "cam_finder_raw",
        "documentation": {}
    },
    {
        "label": "last_time_fetched",
        "kind": 5,
        "importPath": "camfinder",
        "description": "camfinder",
        "peekOfCode": "last_time_fetched = time.time() # get the current time\nfirst_run = True # set a flag to indicate that this is the first run of the loop (for the first run, we will download rss feeds for all the buoys)\nwhile True:\n    try:\n        # turn on at 4 am CST and turn off at 11 pm CST\n        if datetime.datetime.now().hour < 4 or datetime.datetime.now().hour > 22: # if it is before 4 am or after 11 pm\n            # wait to turn on until 4 am CST\n            # keep the computer awake\n            print('The computer is sleeping')\n            time.sleep(240) # sleep for 4 minutes",
        "detail": "camfinder",
        "documentation": {}
    },
    {
        "label": "first_run",
        "kind": 5,
        "importPath": "camfinder",
        "description": "camfinder",
        "peekOfCode": "first_run = True # set a flag to indicate that this is the first run of the loop (for the first run, we will download rss feeds for all the buoys)\nwhile True:\n    try:\n        # turn on at 4 am CST and turn off at 11 pm CST\n        if datetime.datetime.now().hour < 4 or datetime.datetime.now().hour > 22: # if it is before 4 am or after 11 pm\n            # wait to turn on until 4 am CST\n            # keep the computer awake\n            print('The computer is sleeping')\n            time.sleep(240) # sleep for 4 minutes\n            continue",
        "detail": "camfinder",
        "documentation": {}
    },
    {
        "label": "scrape_links",
        "kind": 2,
        "importPath": "carmensandiego",
        "description": "carmensandiego",
        "peekOfCode": "def scrape_links(timezone, page):\n    # get the html of the page\n    url = f'http://www.insecam.org/en/bytimezone/{timezone}/?page={page}'\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # find all the links with 'view' in them\n    links = soup.find_all('a', href=re.compile('view'))\n    # add the links to the dataframe\n    for link in links:\n        cameras_df.loc[len(cameras_df)] = [link['href'], timezone, link['title']]",
        "detail": "carmensandiego",
        "documentation": {}
    },
    {
        "label": "imageurls[0]",
        "kind": 5,
        "importPath": "carmensandiego",
        "description": "carmensandiego",
        "peekOfCode": "imageurls[0] = new String(\"http://80.56.142.202:83/mjpg/video.mjpg\");\n</script>\n<script async=\"\" src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n<ins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-9642036526375612\" data-ad-slot=\"8439664353\"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n```\nSo, if you find the `nofollow` a rel and retrieve the href attribute, you will get the url for the stream.\nThe `title` attribute contains the location of the camera which is also useful to keep in the dataframe.",
        "detail": "carmensandiego",
        "documentation": {}
    },
    {
        "label": "cameras_df",
        "kind": 5,
        "importPath": "carmensandiego",
        "description": "carmensandiego",
        "peekOfCode": "cameras_df = pd.DataFrame(columns=['url', 'timezone', 'location'])\n# what else could I get from the page? location, time, etc. Within the html of the `view` page there is a table in a the div with class'camera-details' which contains the location, time, etc. I could scrape that and add it to the dataframe. This includes Country, Country Code, Region, City, Latitude, Longitude, Zip, and Timezone.\n# the css selector for this table is '.camera-details'\n# Step One A. Request the html of each timezone page and scrape the links from the html.\n# The timezones are: +01:00, +02:00, +03:00, +04:00, +05:00, +06:00, +07:00, +08:00, +09:00, +10:00, +11:00, +12:00, -01:00, -02:00, -03:00, -04:00, -05:00, -06:00, -07:00, -08:00, -09:00, -10:00, -11:00, -12:00, +13:00\ntimezones = ['+01:00', '+02:00', '+03:00', '+04:00', '+05:00', '+06:00', '+07:00', '+08:00', '+09:00', '+10:00', '+11:00', '+12:00', '-01:00', '-02:00', '-03:00', '-04:00', '-05:00', '-06:00', '-07:00', '-08:00', '-09:00', '-10:00', '-11:00', '-12:00', '+13:00']\n# make a function to perform the scraping so we can use it for each timezone and use ratelimit to limit the number of requests per second.\n@sleep_and_retry\n@limits(calls=20, period=600)\ndef scrape_links(timezone, page):",
        "detail": "carmensandiego",
        "documentation": {}
    },
    {
        "label": "timezones",
        "kind": 5,
        "importPath": "carmensandiego",
        "description": "carmensandiego",
        "peekOfCode": "timezones = ['+01:00', '+02:00', '+03:00', '+04:00', '+05:00', '+06:00', '+07:00', '+08:00', '+09:00', '+10:00', '+11:00', '+12:00', '-01:00', '-02:00', '-03:00', '-04:00', '-05:00', '-06:00', '-07:00', '-08:00', '-09:00', '-10:00', '-11:00', '-12:00', '+13:00']\n# make a function to perform the scraping so we can use it for each timezone and use ratelimit to limit the number of requests per second.\n@sleep_and_retry\n@limits(calls=20, period=600)\ndef scrape_links(timezone, page):\n    # get the html of the page\n    url = f'http://www.insecam.org/en/bytimezone/{timezone}/?page={page}'\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    # find all the links with 'view' in them",
        "detail": "carmensandiego",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "finding_sunrise",
        "description": "finding_sunrise",
        "peekOfCode": "model = load_model('models/buoy_model/keras_model.h5')\n# load the images\n# we will load the images from the webcam_captures folder\n# we will then run the model on each image and return a prediction for if the image contains a sunrise or not\n# we will then save the predictions to a csv file\n# get the list of locations\nlocations = os.listdir('images/webcam_captures')\n# create a dataframe to store the predictions\npredictions = pd.DataFrame(columns=['location', 'prediction'])\n# loop through the locations",
        "detail": "finding_sunrise",
        "documentation": {}
    },
    {
        "label": "locations",
        "kind": 5,
        "importPath": "finding_sunrise",
        "description": "finding_sunrise",
        "peekOfCode": "locations = os.listdir('images/webcam_captures')\n# create a dataframe to store the predictions\npredictions = pd.DataFrame(columns=['location', 'prediction'])\n# loop through the locations\nfor location in locations:\n    # get the list of images\n    images = os.listdir('images/webcam_captures/' + location)\n    # loop through the images\n    for image in images:\n        # load the image",
        "detail": "finding_sunrise",
        "documentation": {}
    },
    {
        "label": "predictions",
        "kind": 5,
        "importPath": "finding_sunrise",
        "description": "finding_sunrise",
        "peekOfCode": "predictions = pd.DataFrame(columns=['location', 'prediction'])\n# loop through the locations\nfor location in locations:\n    # get the list of images\n    images = os.listdir('images/webcam_captures/' + location)\n    # loop through the images\n    for image in images:\n        # load the image\n        img = image.load_img('images/webcam_captures/' + location + '/' + image, target_size=(256, 256))\n        # convert the image to an array",
        "detail": "finding_sunrise",
        "documentation": {}
    },
    {
        "label": "is_recent",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def is_recent(file, minutes):\n    # get the time the image was taken\n    image_time = os.path.getmtime(file)\n    # get the current time\n    current_time = time.time()\n    # get the difference between the two times\n    time_difference = current_time - image_time\n    # if the time difference is less than minutes, return true\n    if time_difference < minutes*60:\n        return True",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "crop_the_bottom_off",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def crop_the_bottom_off(images):\n    # for each of the images crop the bottom off (20 pixels)\n    for image in images:\n        try:\n            # get the image size\n            img_width, img_height = get_image_size(image)\n            # crop the bottom off\n            cropped_image = image.crop((0, 0, img_width, img_height-20))\n            # save the image\n            cropped_image.save(image)",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "check_colors_of_six_panels",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def check_colors_of_six_panels(image):\n    # there are six panels in the image (side by side) and we want to check the colors of each panel\n    # get the image size\n    # the input image should be an image object\n    img_width, img_height = get_image_size(image)\n    # get the width of each panel\n    panel_width = img_width/6\n    # get the height of each panel (remove botttom 20 pixels)\n    panel_height = img_height-20\n    # get the colors of each panel",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "get_panel_segments",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def get_panel_segments(image):\n    \"\"\"\n    get_panel_segments takes an image and returns the segments of the image that are the panels\n    :param image: the image to be segmented\n    :param image: the image to be segmented\n    :type image: image object (from PIL) or numpy array (from OpenCV)\n    :return: the segments of the image that are the panels\n    :rtype: list of image objects\n    \"\"\"\n    # get the image size",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "get_average_color",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def get_average_color(image):\n    \"\"\"\n    get_average_color takes an image and returns the average color of the image\n    :param image: the image to be segmented\n    :type image: image object (from PIL) or numpy array (from OpenCV)\n    :return: the average color of the image\n    :rtype: tuple of integers\n    \"\"\"\n    # get the image size\n    img_width, img_height = image.shape[0], image.shape[1]",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "generate_one_full_day",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def generate_one_full_day(buoy_id, day_number, month_number, year_number):\n    # concatenate one image for each hour of the day and save it as a new image called 'full_day.png'\n    # get the images from the buoy_id folder and sort them\n    images = os.listdir(buoy_id)\n    images.sort()\n    # the names of the images are in the format: '2019-01-01_00.png'\n    # images/buoys/41004/2022_11_5_15_44.jpg\n    # where the day is the 3rd element in the list\n    # and the hour is the 4th element in the list\n    # so we can use a list comprehension to get the images for each hour of the day if we sort the images first.",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "finding_red_version_two",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def finding_red_version_two(image):\n    img_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n    image_height = image.shape[0]\n    image_width = image.shape[1]\n    # https://stackoverflow.com/questions/30331944/finding-red-color-in-image-using-python-opencv\n    image_result = np.zeros((image_height,image_width,3),np.uint8)\n    for i in range(image_height):  #those are set elsewhere\n        for j in range(image_width): #those are set elsewhere\n            if img_hsv[i][j][1]>=50 \\\n                and img_hsv[i][j][2]>=50 \\",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "finding_red_version_three",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def finding_red_version_three(image_path):\n    \"\"\"\n    finding_red_version_three takes an image and returns the red pixels in the image\n    :param image_path: the path to the image to be segmented\n    :param image_path: the path to the image to be segmented\n    :type image_path: string\n    :return: the red pixels in the image\n    :rtype: image object\n    \"\"\"\n    img=cv2.imread(image_path)",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "detect_red_v4",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def detect_red_v4(image):\n    # Red color\n    if type(image) == str:\n        image = cv2.imread(image) # read the image\n    low_red = np.array([161, 155, 84])\n    high_red = np.array([179, 255, 255])\n    red_mask = cv2.inRange(image, low_red, high_red)\n    percent_pixels_red = np.sum(red_mask) / (image.shape[0] * image.shape[1])\n    return percent_pixels_red\ndef detect_red(img):",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "detect_red",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def detect_red(img):\n    \"\"\"\n    detect_red _summary_\n    _extended_summary_\n    :param image: _description_\n    :type image:\n    :return: _description_\n    :rtype: _type_\n    \"\"\"\n    try:",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "deal_with_white_images_and_populate_tapestry",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def deal_with_white_images_and_populate_tapestry():\n    sunsets_found = 0 # keep track of how many sunsets we find\n    files =glob.glob('images/buoys/*/*')\n    # without glob\n    #files = []\n    #for file in os.listdir('images/buoys/'):\n    #   files.append('images/buoys/' + file)\n    #print(files)\n    height, width, channels = cv2.imread(files[0]).shape\n    # blank_image = np.zeros((height*10, width, channels), np.uint8)",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "stitched_panoramas",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def stitched_panoramas(panel1, panel2, panel3, panel4, panel5, panel6):\n    # get the image size\n    img_width, img_height = panel1.shape[1], panel1.shape[0]\n    # get the ratio of the width to height\n    r = float(img_width)/float(img_height)\n    # get the aspect ratio of the image\n    ar = round(r, 2)\n    # calculate the rotation angle\n    rot = math.degrees(math.atan2(-panel1.get_top(), -panel1.get_left()))\n    # get the rotation matrix for this angle",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "get_image_size",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def get_image_size(image):\n    \"\"\"\n    get_image_size returns the width and height of an image\n    _extended_summary_\n    :param image: the image to get the size of\n    :type image: cv2 image\n    :return: the width and height of the image\n    :rtype: tuple\n    \"\"\"\n    # get the image width and height",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "buoy_links",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def buoy_links():\n    global ids\n    links = [\"https://www.ndbc.noaa.gov/buoycam.php?station=42001\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46059\",\"https://www.ndbc.noaa.gov/buoycam.php?station=41044\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46071\",\"https://www.ndbc.noaa.gov/buoycam.php?station=42002\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46072\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46066\",\"https://www.ndbc.noaa.gov/buoycam.php?station=41046\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46088\",\"https://www.ndbc.noaa.gov/buoycam.php?station=44066\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46089\",\"https://www.ndbc.noaa.gov/buoycam.php?station=41043\",\"https://www.ndbc.noaa.gov/buoycam.php?station=42012\",\"https://www.ndbc.noaa.gov/buoycam.php?station=42039\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46012\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46011\",\"https://www.ndbc.noaa.gov/buoycam.php?station=42060\",\"https://www.ndbc.noaa.gov/buoycam.php?station=41009\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46028\",\"https://www.ndbc.noaa.gov/buoycam.php?station=44011\",\"https://www.ndbc.noaa.gov/buoycam.php?station=41008\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46015\",\"https://www.ndbc.noaa.gov/buoycam.php?station=42059\",\"https://www.ndbc.noaa.gov/buoycam.php?station=44013\",\"https://www.ndbc.noaa.gov/buoycam.php?station=44007\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46002\",\"https://www.ndbc.noaa.gov/buoycam.php?station=51003\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46027\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46026\",\"https://www.ndbc.noaa.gov/buoycam.php?station=51002\",\"https://www.ndbc.noaa.gov/buoycam.php?station=51000\",\"https://www.ndbc.noaa.gov/buoycam.php?station=42040\",\"https://www.ndbc.noaa.gov/buoycam.php?station=44020\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46025\",\"https://www.ndbc.noaa.gov/buoycam.php?station=41010\",\"https://www.ndbc.noaa.gov/buoycam.php?station=41004\",\"https://www.ndbc.noaa.gov/buoycam.php?station=51001\",\"https://www.ndbc.noaa.gov/buoycam.php?station=44025\",\"https://www.ndbc.noaa.gov/buoycam.php?station=41001\",\"https://www.ndbc.noaa.gov/buoycam.php?station=51004\",\"https://www.ndbc.noaa.gov/buoycam.php?station=44027\",\"https://www.ndbc.noaa.gov/buoycam.php?station=41002\",\"https://www.ndbc.noaa.gov/buoycam.php?station=42020\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46078\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46087\",\"https://www.ndbc.noaa.gov/buoycam.php?station=51101\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46086\",\"https://www.ndbc.noaa.gov/buoycam.php?station=45002\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46053\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46047\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46084\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46085\",\"https://www.ndbc.noaa.gov/buoycam.php?station=45003\",\"https://www.ndbc.noaa.gov/buoycam.php?station=45007\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46042\",\"https://www.ndbc.noaa.gov/buoycam.php?station=45012\",\"https://www.ndbc.noaa.gov/buoycam.php?station=42019\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46069\",\"https://www.ndbc.noaa.gov/buoycam.php?station=46054\",\"https://www.ndbc.noaa.gov/buoycam.php?station=41049\",\"https://www.ndbc.noaa.gov/buoycam.php?station=45005\"]\n    #note: undo this to go with the established buoy list\n    # links_2 = create_buoy_links(ids)\n    # # append the links_2 to links if they are not already in links\n    # for link in links_2:\n    #     if link not in links:\n    #         links.append(link)\n    return links",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "create_buoy_links",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def create_buoy_links(ids):\n    # for each id in ids, create a link\n    links = []\n    for id in ids:\n        link = \"https://www.ndbc.noaa.gov/buoycam.php?station=\" + id\n        links.append(link)\n    return links\n# Notes:\n# Buoy 42002 Has good sunsets\ndef check_buoy_image_ifwhite(image):",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "check_buoy_image_ifwhite",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def check_buoy_image_ifwhite(image):\n    \"\"\"\n    check_buoy_image_ifwhite checks if the image is white\n    This function checks if the image is white. If the image is white, then the image is not valid and should be deleted.\n    :param image: the image to check\n    :type image: result of requests library get request for image url\n    :return: True if the image is white, False if the image is not white\n    :rtype: bool\n    \"\"\"\n    # some buoys do not have a camera or the camera is not working. In these cases the image is white with only the text \"No Image Available\"",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "ocean_stitching",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def ocean_stitching(imagePaths, pano_path):\n    images = []\n    # loop over the image paths, load each one, and add them to our\n    # images to stitch list\n    # open each image with cv2 and append to images list\n    for imagePath in imagePaths:\n        try:\n            # add the full path to the image\n            # '/Volumes/Backups of Grahams IMAC/PythonProjects/PySeas_Master_Folder/PySeas/images/panels/44020/2022_11_6_10_54/panel_1.jpg'\n            # read the image",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "refine_view",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def refine_view(stitched_image):\n    stitched = cv2.copyMakeBorder(stitched, 10, 10, 10, 10,\n\t\t\tcv2.BORDER_CONSTANT, (0, 0, 0))\n    # convert the stitched image to grayscale and threshold it\n    # such that all pixels greater than zero are set to 255\n    # (foreground) while all others remain 0 (background)\n    gray = cv2.cvtColor(stitched, cv2.COLOR_BGR2GRAY)\n    thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY)[1]\n    # find all external contours in the threshold image then find\n    # the *largest* contour which will be the contour/outline of",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "create_pano_image",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def create_pano_image(image_list, pano_path):\n    # create a pano image from the images in image_list\n    # image_list is a list of image paths\n    # pano_path is the path to save the pano image\n    # create the pano image\n    ocean_stitching(image_list, pano_path)\n    # refine the pano image\n    #refine_view(pano_path)\ndef chunk_images(buoy_id,foldername):\n    \"\"\"",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "chunk_images",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def chunk_images(buoy_id,foldername):\n    \"\"\"\n    chunk_images takes a folder of images and splits them into sets of 6 images\n    _extended_summary_\n    :param buoy_id: The id of the buoy\n    :type buoy_id: int\n    :param foldername: The name of the folder containing the images\n    :type foldername: str\n    # \"\"\"\n    # #buoy_id = str(foldername)",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "pull_data",
        "kind": 2,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "def pull_data(cam_url, buoy_id, now):\n    img = requests.get(cam_url) # get the image\n    if img.status_code == 200:\n        return img\n    else:\n        print(\"status code\", img.status_code, \"for buoy\", buoy_id)\n    return img\n### Testing the code\n# detect red in an image\n# load the image",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "last_time_fetched",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "last_time_fetched = time.time() # get the current time\nfirst_run = True # set a flag to indicate that this is the first run of the loop (for the first run, we will download rss feeds for all the buoys)\nduplicate_removal_flag = True # set this flag to true if we want to remove duplicated images with difPy\n#note: bugs are present in difPy, so this flag is set to false\nexper_1 = False # flag for dupe detect in panels\nverbose_wait = False # flag that makes waiting show a progress bar.\n# import the necessary packages\nfrom imutils import paths\nimport numpy as np\nimport argparse",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "first_run",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "first_run = True # set a flag to indicate that this is the first run of the loop (for the first run, we will download rss feeds for all the buoys)\nduplicate_removal_flag = True # set this flag to true if we want to remove duplicated images with difPy\n#note: bugs are present in difPy, so this flag is set to false\nexper_1 = False # flag for dupe detect in panels\nverbose_wait = False # flag that makes waiting show a progress bar.\n# import the necessary packages\nfrom imutils import paths\nimport numpy as np\nimport argparse\nimport imutils",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "duplicate_removal_flag",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "duplicate_removal_flag = True # set this flag to true if we want to remove duplicated images with difPy\n#note: bugs are present in difPy, so this flag is set to false\nexper_1 = False # flag for dupe detect in panels\nverbose_wait = False # flag that makes waiting show a progress bar.\n# import the necessary packages\nfrom imutils import paths\nimport numpy as np\nimport argparse\nimport imutils\nimport cv2",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "exper_1",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "exper_1 = False # flag for dupe detect in panels\nverbose_wait = False # flag that makes waiting show a progress bar.\n# import the necessary packages\nfrom imutils import paths\nimport numpy as np\nimport argparse\nimport imutils\nimport cv2\nimport glob\nrotating = True # flag to indicate if the tapestry is rotating",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "verbose_wait",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "verbose_wait = False # flag that makes waiting show a progress bar.\n# import the necessary packages\nfrom imutils import paths\nimport numpy as np\nimport argparse\nimport imutils\nimport cv2\nimport glob\nrotating = True # flag to indicate if the tapestry is rotating\npanel_mode = False # flag to indicate if we want to use panels for color detection",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "rotating",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "rotating = True # flag to indicate if the tapestry is rotating\npanel_mode = False # flag to indicate if we want to use panels for color detection\ndef is_recent(file, minutes):\n    # get the time the image was taken\n    image_time = os.path.getmtime(file)\n    # get the current time\n    current_time = time.time()\n    # get the difference between the two times\n    time_difference = current_time - image_time\n    # if the time difference is less than minutes, return true",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "panel_mode",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "panel_mode = False # flag to indicate if we want to use panels for color detection\ndef is_recent(file, minutes):\n    # get the time the image was taken\n    image_time = os.path.getmtime(file)\n    # get the current time\n    current_time = time.time()\n    # get the difference between the two times\n    time_difference = current_time - image_time\n    # if the time difference is less than minutes, return true\n    if time_difference < minutes*60:",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "cam_urls",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "cam_urls = buoy_links() # get the links to the cameras\nall_buoy_urls = create_buoy_links(ids)\nstitch_switch = False # make false if you don't want to stitch the images.\n# open the blacklist file\nfrom ratelimit import limits, sleep_and_retry\n# @limits(calls=1, period=4) # limit the number of calls to the function to 1 every 4 seconds.\n@sleep_and_retry\ndef pull_data(cam_url, buoy_id, now):\n    img = requests.get(cam_url) # get the image\n    if img.status_code == 200:",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "all_buoy_urls",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "all_buoy_urls = create_buoy_links(ids)\nstitch_switch = False # make false if you don't want to stitch the images.\n# open the blacklist file\nfrom ratelimit import limits, sleep_and_retry\n# @limits(calls=1, period=4) # limit the number of calls to the function to 1 every 4 seconds.\n@sleep_and_retry\ndef pull_data(cam_url, buoy_id, now):\n    img = requests.get(cam_url) # get the image\n    if img.status_code == 200:\n        return img",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "stitch_switch",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "stitch_switch = False # make false if you don't want to stitch the images.\n# open the blacklist file\nfrom ratelimit import limits, sleep_and_retry\n# @limits(calls=1, period=4) # limit the number of calls to the function to 1 every 4 seconds.\n@sleep_and_retry\ndef pull_data(cam_url, buoy_id, now):\n    img = requests.get(cam_url) # get the image\n    if img.status_code == 200:\n        return img\n    else:",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "image = cv2.imread('images/buoys/46072/2022_11_5_19_27.jpg')\nimage_path = 'images/buoys/46072/2022_11_5_19_27.jpg'\n#* Test 2.\n# result = finding_red_version_two(image) # find the red in the image\n# print(result)\n#* Test 3. hsv and npwhere\noutput_img = finding_red_version_three(image_path) # find the red in the image\nprint(output_img)\n#print(output_hsv)\n#Notes to self: remove functions for tests up to this point.",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "image_path",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "image_path = 'images/buoys/46072/2022_11_5_19_27.jpg'\n#* Test 2.\n# result = finding_red_version_two(image) # find the red in the image\n# print(result)\n#* Test 3. hsv and npwhere\noutput_img = finding_red_version_three(image_path) # find the red in the image\nprint(output_img)\n#print(output_hsv)\n#Notes to self: remove functions for tests up to this point.\n#* Test 4. Just red percent",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "output_img",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "output_img = finding_red_version_three(image_path) # find the red in the image\nprint(output_img)\n#print(output_hsv)\n#Notes to self: remove functions for tests up to this point.\n#* Test 4. Just red percent\n#& Successful!\npercent_red = detect_red_v4(image_path)\nprint(percent_red)\n# test with the function to see if it detects red.\ndetect_red_v4(image_path)# returns True if it detects red, False if it doesn't.",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "percent_red",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "percent_red = detect_red_v4(image_path)\nprint(percent_red)\n# test with the function to see if it detects red.\ndetect_red_v4(image_path)# returns True if it detects red, False if it doesn't.\ndo_loop = True\nif do_loop:",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "do_loop",
        "kind": 5,
        "importPath": "looper",
        "description": "looper",
        "peekOfCode": "do_loop = True\nif do_loop:\n    pass\nelse:\n    exit() # exit the program if do_loop is False.\nwhile True:\n    try:\n        # turn on at 4 am CST and turn off at 11 pm CST\n        if datetime.datetime.now().hour < 3 or datetime.datetime.now().hour > 24: # if it is before 3 am or after 12 am\n            # wait to turn on until 4 am CST",
        "detail": "looper",
        "documentation": {}
    },
    {
        "label": "preprocess_image",
        "kind": 2,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "def preprocess_image(image_path):\n  \"\"\" Loads image from path and preprocesses to make it model ready\n      Args:\n        image_path: Path to the image file\n  \"\"\"\n  hr_image = tf.image.decode_image(tf.io.read_file(image_path))\n  # If PNG, remove the alpha channel. The model only supports\n  # images with 3 color channels.\n  if hr_image.shape[-1] == 4:\n    hr_image = hr_image[...,:-1]",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "save_image",
        "kind": 2,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "def save_image(image, filename):\n  \"\"\"\n    Saves unscaled Tensor Images.\n    Args:\n      image: 3D image tensor. [height, width, channels]\n      filename: Name of the file to save.\n  \"\"\"\n  if not isinstance(image, Image.Image):\n    image = tf.clip_by_value(image, 0, 255)\n    image = Image.fromarray(tf.cast(image, tf.uint8).numpy())",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "plot_image",
        "kind": 2,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "def plot_image(image, title=\"\"):\n  \"\"\"\n    Plots images from image tensors.\n    Args:\n      image: 3D image tensor. [height, width, channels].\n      title: Title to display in the plot.\n  \"\"\"\n  image = np.asarray(image)\n  image = tf.clip_by_value(image, 0, 255)\n  image = Image.fromarray(tf.cast(image, tf.uint8).numpy())",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "downscale_image",
        "kind": 2,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "def downscale_image(image):\n  \"\"\"\n      Scales down images using bicubic downsampling.\n      Args:\n          image: 3D or 4D tensor of preprocessed image\n  \"\"\"\n  image_size = []\n  if len(image.shape) == 3:\n    image_size = [image.shape[1], image.shape[0]]\n  else:",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "os.environ[\"TFHUB_DOWNLOAD_PROGRESS\"]",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "os.environ[\"TFHUB_DOWNLOAD_PROGRESS\"] = \"True\"\n# %%\n# !wget \"https://user-images.githubusercontent.com/12981474/40157448-eff91f06-5953-11e8-9a37-f6b5693fa03f.png\" -O original.png\n# %%\n# Declaring Constants\nIMAGE_PATH = \"images/keepers/2022_11_5_18_3_panel_3 copy.png\"\nSAVED_MODEL_PATH = \"https://tfhub.dev/captain-pool/esrgan-tf2/1\"\n# %% [markdown]\n# **Defining Helper Functions**\n# %%",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "IMAGE_PATH",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "IMAGE_PATH = \"images/keepers/2022_11_5_18_3_panel_3 copy.png\"\nSAVED_MODEL_PATH = \"https://tfhub.dev/captain-pool/esrgan-tf2/1\"\n# %% [markdown]\n# **Defining Helper Functions**\n# %%\ndef preprocess_image(image_path):\n  \"\"\" Loads image from path and preprocesses to make it model ready\n      Args:\n        image_path: Path to the image file\n  \"\"\"",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "SAVED_MODEL_PATH",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "SAVED_MODEL_PATH = \"https://tfhub.dev/captain-pool/esrgan-tf2/1\"\n# %% [markdown]\n# **Defining Helper Functions**\n# %%\ndef preprocess_image(image_path):\n  \"\"\" Loads image from path and preprocesses to make it model ready\n      Args:\n        image_path: Path to the image file\n  \"\"\"\n  hr_image = tf.image.decode_image(tf.io.read_file(image_path))",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "hr_image",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "hr_image = preprocess_image(IMAGE_PATH)\n# %%\n# Plotting Original Resolution image\nplot_image(tf.squeeze(hr_image), title=\"Original Image\")\nsave_image(tf.squeeze(hr_image), filename=\"Original Image\")\n# %%\nmodel = hub.load(SAVED_MODEL_PATH)\n# %%\nstart = time.time()\nfake_image = model(hr_image)",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "model = hub.load(SAVED_MODEL_PATH)\n# %%\nstart = time.time()\nfake_image = model(hr_image)\nfake_image = tf.squeeze(fake_image)\nprint(\"Time Taken: %f\" % (time.time() - start))\n# %%\n# Plotting Super Resolution Image\nplot_image(tf.squeeze(fake_image), title=\"Super Resolution\")\nsave_image(tf.squeeze(fake_image), filename=\"Super Resolution\")",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "start = time.time()\nfake_image = model(hr_image)\nfake_image = tf.squeeze(fake_image)\nprint(\"Time Taken: %f\" % (time.time() - start))\n# %%\n# Plotting Super Resolution Image\nplot_image(tf.squeeze(fake_image), title=\"Super Resolution\")\nsave_image(tf.squeeze(fake_image), filename=\"Super Resolution\")\n# %% [markdown]\n# ### Evaluating Performance of the Model",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "fake_image",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "fake_image = model(hr_image)\nfake_image = tf.squeeze(fake_image)\nprint(\"Time Taken: %f\" % (time.time() - start))\n# %%\n# Plotting Super Resolution Image\nplot_image(tf.squeeze(fake_image), title=\"Super Resolution\")\nsave_image(tf.squeeze(fake_image), filename=\"Super Resolution\")\n# %% [markdown]\n# ### Evaluating Performance of the Model\n# %%",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "fake_image",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "fake_image = tf.squeeze(fake_image)\nprint(\"Time Taken: %f\" % (time.time() - start))\n# %%\n# Plotting Super Resolution Image\nplot_image(tf.squeeze(fake_image), title=\"Super Resolution\")\nsave_image(tf.squeeze(fake_image), filename=\"Super Resolution\")\n# %% [markdown]\n# ### Evaluating Performance of the Model\n# %%\n# !wget \"https://lh4.googleusercontent.com/-Anmw5df4gj0/AAAAAAAAAAI/AAAAAAAAAAc/6HxU8XFLnQE/photo.jpg64\" -O test.jpg",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "IMAGE_PATH",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "IMAGE_PATH = \"test.jpg\"\n# %%\n# Defining helper functions\ndef downscale_image(image):\n  \"\"\"\n      Scales down images using bicubic downsampling.\n      Args:\n          image: 3D or 4D tensor of preprocessed image\n  \"\"\"\n  image_size = []",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "hr_image",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "hr_image = preprocess_image(IMAGE_PATH)\n# %%\nlr_image = downscale_image(tf.squeeze(hr_image))\n# %%\n# Plotting Low Resolution Image\nplot_image(tf.squeeze(lr_image), title=\"Low Resolution\")\n# %%\nmodel = hub.load(SAVED_MODEL_PATH)\n# %%\nstart = time.time()",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "lr_image",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "lr_image = downscale_image(tf.squeeze(hr_image))\n# %%\n# Plotting Low Resolution Image\nplot_image(tf.squeeze(lr_image), title=\"Low Resolution\")\n# %%\nmodel = hub.load(SAVED_MODEL_PATH)\n# %%\nstart = time.time()\nfake_image = model(lr_image)\nfake_image = tf.squeeze(fake_image)",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "model = hub.load(SAVED_MODEL_PATH)\n# %%\nstart = time.time()\nfake_image = model(lr_image)\nfake_image = tf.squeeze(fake_image)\nprint(\"Time Taken: %f\" % (time.time() - start))\n# %%\nplot_image(tf.squeeze(fake_image), title=\"Super Resolution\")\n# Calculating PSNR wrt Original Image\npsnr = tf.image.psnr(",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "start = time.time()\nfake_image = model(lr_image)\nfake_image = tf.squeeze(fake_image)\nprint(\"Time Taken: %f\" % (time.time() - start))\n# %%\nplot_image(tf.squeeze(fake_image), title=\"Super Resolution\")\n# Calculating PSNR wrt Original Image\npsnr = tf.image.psnr(\n    tf.clip_by_value(fake_image, 0, 255),\n    tf.clip_by_value(hr_image, 0, 255), max_val=255)",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "fake_image",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "fake_image = model(lr_image)\nfake_image = tf.squeeze(fake_image)\nprint(\"Time Taken: %f\" % (time.time() - start))\n# %%\nplot_image(tf.squeeze(fake_image), title=\"Super Resolution\")\n# Calculating PSNR wrt Original Image\npsnr = tf.image.psnr(\n    tf.clip_by_value(fake_image, 0, 255),\n    tf.clip_by_value(hr_image, 0, 255), max_val=255)\nprint(\"PSNR Achieved: %f\" % psnr)",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "fake_image",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "fake_image = tf.squeeze(fake_image)\nprint(\"Time Taken: %f\" % (time.time() - start))\n# %%\nplot_image(tf.squeeze(fake_image), title=\"Super Resolution\")\n# Calculating PSNR wrt Original Image\npsnr = tf.image.psnr(\n    tf.clip_by_value(fake_image, 0, 255),\n    tf.clip_by_value(hr_image, 0, 255), max_val=255)\nprint(\"PSNR Achieved: %f\" % psnr)\n# %% [markdown]",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "psnr",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "psnr = tf.image.psnr(\n    tf.clip_by_value(fake_image, 0, 255),\n    tf.clip_by_value(hr_image, 0, 255), max_val=255)\nprint(\"PSNR Achieved: %f\" % psnr)\n# %% [markdown]\n# **Comparing Outputs size by side.**\n# %%\nplt.rcParams['figure.figsize'] = [15, 10]\nfig, axes = plt.subplots(1, 3)\nfig.tight_layout()",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "plt.rcParams['figure.figsize']",
        "kind": 5,
        "importPath": "one",
        "description": "one",
        "peekOfCode": "plt.rcParams['figure.figsize'] = [15, 10]\nfig, axes = plt.subplots(1, 3)\nfig.tight_layout()\nplt.subplot(131)\nplot_image(tf.squeeze(hr_image), title=\"Original\")\nplt.subplot(132)\nfig.tight_layout()\nplot_image(tf.squeeze(lr_image), \"x4 Bicubic\")\nplt.subplot(133)\nfig.tight_layout()",
        "detail": "one",
        "documentation": {}
    },
    {
        "label": "BasePafy",
        "kind": 6,
        "importPath": "reformat",
        "description": "reformat",
        "peekOfCode": "class BasePafy(object):\n    \"\"\" Class to represent a YouTube video. \"\"\"\n    def __init__(self, video_url, basic=True, gdata=False,\n                 size=False, callback=None, ydl_opts=None):\n        \"\"\" Set initial values. \"\"\"\n        self.version = __version__\n        self.videoid = extract_video_id(video_url)\n        self.watchv_url = g.urls['watchv'] % self.videoid\n        self.callback = callback\n        self._have_basic = False",
        "detail": "reformat",
        "documentation": {}
    },
    {
        "label": "BaseStream",
        "kind": 6,
        "importPath": "reformat",
        "description": "reformat",
        "peekOfCode": "class BaseStream(object):\n    \"\"\" YouTube video stream class. \"\"\"\n    def __init__(self, parent):\n        \"\"\" Set initial values. \"\"\"\n        self._itag = None\n        self._mediatype = None\n        self._threed = None\n        self._rawbitrate = None\n        self._resolution = None\n        self._quality = None",
        "detail": "reformat",
        "documentation": {}
    },
    {
        "label": "extract_video_id",
        "kind": 2,
        "importPath": "reformat",
        "description": "reformat",
        "peekOfCode": "def extract_video_id(url):\n    \"\"\" Extract the video id from a url, return video id as str. \"\"\"\n    idregx = re.compile(r'[\\w-]{11}$')\n    url = str(url).strip()\n    if idregx.match(url):\n        return url # ID of video\n    if '://' not in url:\n        url = '//' + url\n    parsedurl = urlparse(url)\n    if parsedurl.netloc in ('youtube.com', 'www.youtube.com', 'm.youtube.com', 'gaming.youtube.com'):",
        "detail": "reformat",
        "documentation": {}
    },
    {
        "label": "remux",
        "kind": 2,
        "importPath": "reformat",
        "description": "reformat",
        "peekOfCode": "def remux(infile, outfile, quiet=False, muxer=\"ffmpeg\"):\n    \"\"\" Remux audio. \"\"\"\n    muxer = muxer if isinstance(muxer, str) else \"ffmpeg\"\n    for tool in set([muxer, \"ffmpeg\", \"avconv\"]):\n        cmd = [tool, \"-y\", \"-i\", infile, \"-acodec\", \"copy\", \"-vn\", outfile]\n        try:\n            with open(os.devnull, \"w\") as devnull:\n                subprocess.call(cmd, stdout=devnull, stderr=subprocess.STDOUT)\n        except OSError:\n            dbg(\"Failed to remux audio using %s\", tool)",
        "detail": "reformat",
        "documentation": {}
    },
    {
        "label": "get_size_done",
        "kind": 2,
        "importPath": "reformat",
        "description": "reformat",
        "peekOfCode": "def get_size_done(bytesdone, progress):\n    _progress_dict = {'KB': 1024.0, 'MB': 1048576.0, 'GB': 1073741824.0}\n    return round(bytesdone/_progress_dict.get(progress, 1.0), 2)\ndef get_status_string(progress):\n    status_string = ('  {:,} ' + progress + ' [{:.2%}] received. Rate: [{:4.0f} '\n                     'KB/s].  ETA: [{:.0f} secs]')\n    if early_py_version:\n        status_string = ('  {0:} ' + progress + ' [{1:.2%}] received. Rate:'\n                         ' [{2:4.0f} KB/s].  ETA: [{3:.0f} secs]')\n    return status_string",
        "detail": "reformat",
        "documentation": {}
    },
    {
        "label": "get_status_string",
        "kind": 2,
        "importPath": "reformat",
        "description": "reformat",
        "peekOfCode": "def get_status_string(progress):\n    status_string = ('  {:,} ' + progress + ' [{:.2%}] received. Rate: [{:4.0f} '\n                     'KB/s].  ETA: [{:.0f} secs]')\n    if early_py_version:\n        status_string = ('  {0:} ' + progress + ' [{1:.2%}] received. Rate:'\n                         ' [{2:4.0f} KB/s].  ETA: [{3:.0f} secs]')\n    return status_string",
        "detail": "reformat",
        "documentation": {}
    },
    {
        "label": "early_py_version",
        "kind": 5,
        "importPath": "reformat",
        "description": "reformat",
        "peekOfCode": "early_py_version = sys.version_info[:2] < (2, 7)\nfrom . import __version__, g\nfrom .pafy import call_gdata\nfrom .playlist import get_playlist2\nfrom .util import xenc\ndbg = logging.debug\ndef extract_video_id(url):\n    \"\"\" Extract the video id from a url, return video id as str. \"\"\"\n    idregx = re.compile(r'[\\w-]{11}$')\n    url = str(url).strip()",
        "detail": "reformat",
        "documentation": {}
    },
    {
        "label": "dbg",
        "kind": 5,
        "importPath": "reformat",
        "description": "reformat",
        "peekOfCode": "dbg = logging.debug\ndef extract_video_id(url):\n    \"\"\" Extract the video id from a url, return video id as str. \"\"\"\n    idregx = re.compile(r'[\\w-]{11}$')\n    url = str(url).strip()\n    if idregx.match(url):\n        return url # ID of video\n    if '://' not in url:\n        url = '//' + url\n    parsedurl = urlparse(url)",
        "detail": "reformat",
        "documentation": {}
    },
    {
        "label": "model_filepath",
        "kind": 5,
        "importPath": "using_keras_modeling",
        "description": "using_keras_modeling",
        "peekOfCode": "model_filepath = 'models/converted_keras/keras_model.h5'\nimport tensorflow as tf\ntry:\n    model = tf.keras.models.load_model(model_filepath)\nexcept:\n    print('Model not found')\ntf.keras.models.load_model(\n    model_filepath, custom_objects=None, compile=True, options=None\n)\nprint('Model loaded')",
        "detail": "using_keras_modeling",
        "documentation": {}
    },
    {
        "label": "image_path",
        "kind": 5,
        "importPath": "using_keras_modeling",
        "description": "using_keras_modeling",
        "peekOfCode": "image_path = 'images/panels/41001/2022_11_5_19_27.jpg_panel_1.jpg'\nimg = cv2.imread(image_path) # Reading the image\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Converting the image to RGB\nimg = cv2.resize(img, (224, 224)) # Resizing the image\nimg = img / 255 # Normalizing the image\nimg = np.array(img).reshape(-1, 224, 224, 3) # Reshaping the image\nprint('image loaded')\n# Predicting the class\nprediction = model.predict(img)\nprint(prediction)",
        "detail": "using_keras_modeling",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "using_keras_modeling",
        "description": "using_keras_modeling",
        "peekOfCode": "img = cv2.imread(image_path) # Reading the image\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Converting the image to RGB\nimg = cv2.resize(img, (224, 224)) # Resizing the image\nimg = img / 255 # Normalizing the image\nimg = np.array(img).reshape(-1, 224, 224, 3) # Reshaping the image\nprint('image loaded')\n# Predicting the class\nprediction = model.predict(img)\nprint(prediction)",
        "detail": "using_keras_modeling",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "using_keras_modeling",
        "description": "using_keras_modeling",
        "peekOfCode": "img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Converting the image to RGB\nimg = cv2.resize(img, (224, 224)) # Resizing the image\nimg = img / 255 # Normalizing the image\nimg = np.array(img).reshape(-1, 224, 224, 3) # Reshaping the image\nprint('image loaded')\n# Predicting the class\nprediction = model.predict(img)\nprint(prediction)",
        "detail": "using_keras_modeling",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "using_keras_modeling",
        "description": "using_keras_modeling",
        "peekOfCode": "img = cv2.resize(img, (224, 224)) # Resizing the image\nimg = img / 255 # Normalizing the image\nimg = np.array(img).reshape(-1, 224, 224, 3) # Reshaping the image\nprint('image loaded')\n# Predicting the class\nprediction = model.predict(img)\nprint(prediction)",
        "detail": "using_keras_modeling",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "using_keras_modeling",
        "description": "using_keras_modeling",
        "peekOfCode": "img = img / 255 # Normalizing the image\nimg = np.array(img).reshape(-1, 224, 224, 3) # Reshaping the image\nprint('image loaded')\n# Predicting the class\nprediction = model.predict(img)\nprint(prediction)",
        "detail": "using_keras_modeling",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "using_keras_modeling",
        "description": "using_keras_modeling",
        "peekOfCode": "img = np.array(img).reshape(-1, 224, 224, 3) # Reshaping the image\nprint('image loaded')\n# Predicting the class\nprediction = model.predict(img)\nprint(prediction)",
        "detail": "using_keras_modeling",
        "documentation": {}
    },
    {
        "label": "prediction",
        "kind": 5,
        "importPath": "using_keras_modeling",
        "description": "using_keras_modeling",
        "peekOfCode": "prediction = model.predict(img)\nprint(prediction)",
        "detail": "using_keras_modeling",
        "documentation": {}
    }
]